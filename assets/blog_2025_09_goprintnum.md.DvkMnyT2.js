import{_ as i,c as a,o as n,a4 as t}from"./chunks/framework.Bvn9uf2i.js";const e="/assets/008.BEje3Ckt.jpg",g=JSON.parse('{"title":"从 Sleep 到 Select：用一个例子掌握 Go 并发编程精髓","description":"从简单的阻塞到高效的定时器，从对并发的误解到掌握正确的并发模式，再到最终使用 `context` 构建可维护的健壮代码，这正是每个 Go 开发者的成长之路","frontmatter":{"title":"从 Sleep 到 Select：用一个例子掌握 Go 并发编程精髓","description":"从简单的阻塞到高效的定时器，从对并发的误解到掌握正确的并发模式，再到最终使用 `context` 构建可维护的健壮代码，这正是每个 Go 开发者的成长之路","tags":["Go","并发","定时器","context","阻塞"],"head":[["link",{"rel":"canonical","href":"https://stack.mcell.topblog/2025/09_goprintnum"}],["meta",{"property":"og:url","content":"https://stack.mcell.topblog/2025/09_goprintnum"}]]},"headers":[],"relativePath":"blog/2025/09_goprintnum.md","filePath":"blog/2025/09_goprintnum.md","lastUpdated":1755368679000}'),l={name:"blog/2025/09_goprintnum.md"};function p(h,s,k,r,d,E){return n(),a("div",null,s[0]||(s[0]=[t('<p><img src="'+e+`" alt="008.jpg" loading="lazy"></p><h1 id="从-sleep-到-select-用一个例子掌握-go-并发编程精髓" tabindex="-1">从 Sleep 到 Select：用一个例子掌握 Go 并发编程精髓 <a class="header-anchor" href="#从-sleep-到-select-用一个例子掌握-go-并发编程精髓" aria-label="Permalink to &quot;从 Sleep 到 Select：用一个例子掌握 Go 并发编程精髓&quot;">​</a></h1><blockquote><p>今年早些时候，我写过一篇 <a href="https://stack.mcell.top/blog/2025/03_jsprintnum" target="_blank" rel="noreferrer">《每秒打印一个数字：从简单到晦涩的多种实现》</a>，用的是 <strong>Node.js</strong> 环境，演示了每秒打印数字的几种实现。由于 JavaScript 是单线程，方法不多，顶多靠算法优化。 这次，我写下 <strong>Go 版本</strong>，充分利用了 <strong>Golang 并发特性</strong>，实现更稳定、更灵活的定时任务。这类题目也很常见于面试：我记得去年面试前端岗位时就碰到过.</p></blockquote><p>在开发中，我们经常会遇到需要定时或延时执行任务的场景。一个经典且简单的入门问题是：“如何每秒钟在控制台打印一个数字，从 1 打印到 10？”</p><h2 id="基础之路-最直观的实现" tabindex="-1">基础之路：最直观的实现 <a class="header-anchor" href="#基础之路-最直观的实现" aria-label="Permalink to &quot;基础之路：最直观的实现&quot;">​</a></h2><p>在刚接触编程时，我们最先想到的往往是“让程序暂停一下”的思路。</p><h3 id="time-sleep" tabindex="-1"><code>time.Sleep</code> <a class="header-anchor" href="#time-sleep" aria-label="Permalink to &quot;\`time.Sleep\`&quot;">​</a></h3><p>这是最简单、最直接的方法。<code>time.Sleep</code> 会阻塞当前的 Goroutine（在这里是主 Goroutine），暂停指定的时间。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UseTimeSleep: 使用 time.Sleep，这是最简单直接的方法，程序会阻塞一秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UseTimeSleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--- 使用 time.Sleep ---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.Second) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻塞当前 goroutine 一秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>优点</strong>：代码清晰，易于理解。 <strong>缺点</strong>：在 <code>Sleep</code> 期间，当前的 Goroutine 被完全阻塞，无法执行任何其他操作，效率较低。</p><h3 id="time-after" tabindex="-1"><code>time.After</code> <a class="header-anchor" href="#time-after" aria-label="Permalink to &quot;\`time.After\`&quot;">​</a></h3><p><code>time.After</code> 函数提供了一种略有不同的思路。返回一个通道（<code>channel</code>），然后在指定的时间后向该通道发送一个时间值。我们可以通过等待接收这个通道的信号来达到暂停的效果。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UseTimeAfter: 使用 time.After，每次循环都会创建一个新的定时器，相对低效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UseTimeAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--- 使用 time.After ---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		&lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">After</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.Second) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等待一秒后通道接收到信号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>虽然功能上实现了需求，但在循环中使用 <code>time.After</code> 是一个<strong>不推荐</strong>的做法。每次循环，<code>time.After</code> 都会创建一个新的定时器和关联的通道。这会带来不必要的内存分配和垃圾回收压力，尤其是在循环次数很多或频率很高的情况下。</p><h2 id="效率提升-time-ticker" tabindex="-1">效率提升: <code>time.Ticker</code> <a class="header-anchor" href="#效率提升-time-ticker" aria-label="Permalink to &quot;效率提升: \`time.Ticker\`&quot;">​</a></h2><p>为了解决 <code>time.After</code> 在循环中的低效问题，Go 提供了 <code>time.NewTicker</code>。Ticker（定时器），创建后会按照设定的时间间隔，持续地向其内部的通道 <code>C</code> 发送信号。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UseTimeTicker: 使用 time.Ticker，这是一个高效的定时器，会每隔一秒向通道发送一个信号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UseTimeTicker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--- 使用 time.Ticker ---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ticker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewTicker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.Second)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ticker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 养成好习惯，确保在函数退出时停止 ticker</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		&lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ticker.C </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等待 ticker 发送信号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>关键点</strong>：</p><ul><li><strong>高效</strong>：整个循环只使用一个 Ticker，避免了重复创建资源的开销。</li><li><strong>资源释放</strong>：Ticker 是一个需要手动管理的资源。<code>defer ticker.Stop()</code> 是一个非常好的习惯，它能确保在函数结束时停止 Ticker 并释放相关资源，防止内存泄漏。</li></ul><h2 id="踏入并发-goroutine" tabindex="-1">踏入并发：Goroutine <a class="header-anchor" href="#踏入并发-goroutine" aria-label="Permalink to &quot;踏入并发：Goroutine&quot;">​</a></h2><p>让我们尝试使用 Go 强大的并发特性——Goroutine 来解决这个问题。一个常见的误区是认为“将任务扔进多个 Goroutine 就实现了并发”。让我们看看会发生什么。</p><h3 id="使用-goroutine-和-channel-waitgroup-常见的误区" tabindex="-1">使用 Goroutine 和 Channel/WaitGroup（常见的误区） <a class="header-anchor" href="#使用-goroutine-和-channel-waitgroup-常见的误区" aria-label="Permalink to &quot;使用 Goroutine 和 Channel/WaitGroup（常见的误区）&quot;">​</a></h3><p>下面的两个函数，一个使用 Channel，一个使用 <code>sync.WaitGroup</code>，都尝试启动 10 个 Goroutine，并让每个 Goroutine 在不同的延迟后打印数字。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UseChannel: 使用通道和多个 goroutine，此方法会启动10个goroutine，但打印顺序和间隔不确定</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UseChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--- 使用通道和多个 goroutine (注意：打印顺序和间隔不确定) ---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.Second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每个 goroutine 休眠不同时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			ch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ch) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从通道接收结果，顺序不固定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>这是一个典型的并发误用案例</strong>：为了实现一个本质上是<strong>顺序</strong>的任务（每隔一秒做一件事），而错误地使用了并行的思维。</p><h2 id="go-的惯用范式" tabindex="-1">Go 的惯用范式 <a class="header-anchor" href="#go-的惯用范式" aria-label="Permalink to &quot;Go 的惯用范式&quot;">​</a></h2><p>那么，如何正确地使用并发来处理我们的问题呢？Go 的并发应该是为了让程序的不同部分可以独立运行，而不是把一个顺序任务拆散。</p><h3 id="正确的-goroutine-用法" tabindex="-1">正确的 Goroutine 用法 <a class="header-anchor" href="#正确的-goroutine-用法" aria-label="Permalink to &quot;正确的 Goroutine 用法&quot;">​</a></h3><p>如果我们希望打印数字这个“任务”不阻塞主程序，可以把它整体放进一个单独的 Goroutine 中。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UseSingleGoroutine: 使用单个 goroutine 来实现正确的顺序和间隔</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UseSingleGoroutine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--- 使用单个 goroutine 来实现正确的顺序和间隔 ---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wg </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WaitGroup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	wg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.Second) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每次打印后休眠一秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	wg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>解释</strong>：这里，我们只启动了一个 Goroutine。这个 Goroutine 内部的逻辑是顺序的（循环、打印、休眠）。这完美地实现了我们的需求，同时主 Goroutine 可以通过 <code>wg.Wait()</code> 等待其完成，或者继续执行其他任务。这才是 Goroutine 的正确打开方式之一：<strong>将独立的、连续的任务封装成一个单元，使其与其他代码并发执行</strong>。</p><h3 id="select-与-ticker-的强强联合" tabindex="-1"><code>select</code> 与 <code>Ticker</code> 的强强联合 <a class="header-anchor" href="#select-与-ticker-的强强联合" aria-label="Permalink to &quot;\`select\` 与 \`Ticker\` 的强强联合&quot;">​</a></h3><p><code>select</code> 语句是 Go 并发编程的“调度中心”。允许一个 Goroutine 等待多个通道操作。将 <code>select</code> 和 <code>Ticker</code> 结合是 Go 中处理定时任务的黄金标准。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UseSelectAndTicker: 使用 select 语句和 time.NewTicker</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UseSelectAndTicker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--- 使用 select 和 time.NewTicker ---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ticker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewTicker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.Second)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ticker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ticker.C:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// select 语句会等待 ticker.C 通道收到信号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>虽然在这个简单例子中，它和直接读取 <code>ticker.C</code> 效果一样，但 <code>select</code> 的强大之处在于其扩展性。我们可以轻松地在 <code>select</code> 中加入其他 <code>case</code>，比如处理取消信号、接收其他数据等。</p><h3 id="context-与生命周期管理" tabindex="-1"><code>context</code> 与生命周期管理 <a class="header-anchor" href="#context-与生命周期管理" aria-label="Permalink to &quot;\`context\` 与生命周期管理&quot;">​</a></h3><p>在真实世界的应用中，任何一个长时间运行的 Goroutine 都应该具备被“优雅地”关闭的能力。例如，当用户请求超时或服务需要关闭时，我们希望相关的 Goroutine 能够停止工作并释放资源。<code>context</code> 包正是为此而生。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UseContextWithTicker: 使用 context 和 time.NewTicker 来管理生命周期</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UseContextWithTicker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--- 使用 context 和 time.NewTicker ---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ctx, cancel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithCancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	defer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确保函数退出时调用 cancel()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ticker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewTicker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time.Second)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ticker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ticker.C:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;上下文被取消，提前退出。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li><strong><code>context.WithCancel</code></strong>: 创建一个可以被手动取消的上下文。</li><li><strong><code>defer cancel()</code></strong>: 这是一个关键实践，确保在任何情况下 <code>cancel</code> 函数都会被调用。</li><li><strong><code>select</code> 中的 <code>&lt;-ctx.Done()</code></strong>: <code>select</code> 语句现在监听两个通道。一个是 Ticker 的定时信号，另一个是来自上下文的“取消”信号。一旦外部调用了 <code>cancel()</code> 函数，<code>ctx.Done()</code> 通道就会关闭，该 <code>case</code> 被触发，Goroutine 便可以安全退出循环，实现优雅关闭。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>我们从一个简单的问题出发，探索了多种解决方案，并最终抵达了 Go 并发编程的核心地带。让我们回顾一下这次的旅程：</p><table tabindex="0"><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">核心技术</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点/适用场景</th></tr></thead><tbody><tr><td style="text-align:left;"><strong><code>time.Sleep</code></strong></td><td style="text-align:left;">阻塞</td><td style="text-align:left;">简单直接</td><td style="text-align:left;">效率低，会阻塞 Goroutine</td></tr><tr><td style="text-align:left;"><strong><code>time.After</code></strong></td><td style="text-align:left;">Channel</td><td style="text-align:left;">概念简单</td><td style="text-align:left;">不适用于循环，有资源开销</td></tr><tr><td style="text-align:left;"><strong><code>time.Ticker</code></strong></td><td style="text-align:left;">Channel</td><td style="text-align:left;">高效，资源复用</td><td style="text-align:left;">基础的定时器，需要手动停止</td></tr><tr><td style="text-align:left;"><strong>多个 Goroutines</strong></td><td style="text-align:left;">Goroutine</td><td style="text-align:left;">-</td><td style="text-align:left;"><strong>错误用法</strong>，不能实现顺序间隔任务</td></tr><tr><td style="text-align:left;"><strong>单个 Goroutine</strong></td><td style="text-align:left;">Goroutine, WaitGroup</td><td style="text-align:left;">正确的并发模型，不阻塞主线程</td><td style="text-align:left;">需要同步机制（如 WaitGroup）</td></tr><tr><td style="text-align:left;"><strong><code>select</code> + <code>Ticker</code></strong></td><td style="text-align:left;"><code>select</code>, <code>Ticker</code></td><td style="text-align:left;">灵活，可扩展，是 Go 的惯用范式</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><strong><code>context</code> + <code>Ticker</code></strong></td><td style="text-align:left;"><code>context</code>, <code>select</code></td><td style="text-align:left;"><strong>最佳实践</strong>，健壮，可管理生命周期</td><td style="text-align:left;">适用于需要优雅关闭的长期任务</td></tr></tbody></table><p>更重要的是理解了不同方法背后的设计哲学。从简单的阻塞到高效的定时器，从对并发的误解到掌握正确的并发模式，再到最终使用 <code>context</code> 构建可维护的健壮代码，这正是每个 Go 开发者的成长之路。</p>`,43)]))}const o=i(l,[["render",p]]);export{g as __pageData,o as default};
