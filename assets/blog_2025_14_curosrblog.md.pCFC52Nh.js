import{_ as a,c as n,o as i,a2 as l}from"./chunks/framework.BvOGWhEu.js";const k=JSON.parse('{"title":"【不演了，这篇文章是 AI 写的】我是如何用 Cursor 快速生成一个 Golang 新手教程的","description":"分享使用 Cursor 进行 AI 辅助编程的实践经验，从想法到完整教程的开发过程","frontmatter":{"title":"【不演了，这篇文章是 AI 写的】我是如何用 Cursor 快速生成一个 Golang 新手教程的","description":"分享使用 Cursor 进行 AI 辅助编程的实践经验，从想法到完整教程的开发过程","date":"2025-01-28T00:00:00.000Z","tags":["AI编程","Cursor","Golang","开发工具","教程制作"],"head":[["link",{"rel":"canonical","href":"https://stack.mcell.topblog/2025/14_curosrblog"}],["meta",{"property":"og:url","content":"https://stack.mcell.topblog/2025/14_curosrblog"}]]},"headers":[],"relativePath":"blog/2025/14_curosrblog.md","filePath":"blog/2025/14_curosrblog.md","lastUpdated":1755147736000}'),e={name:"blog/2025/14_curosrblog.md"};function o(p,s,t,c,r,h){return i(),n("div",null,s[0]||(s[0]=[l(`<h1 id="【不演了-这篇文章是-ai-写的】我是如何用-cursor-快速生成一个-golang-新手教程的" tabindex="-1">【不演了，这篇文章是 AI 写的】我是如何用 Cursor 快速生成一个 Golang 新手教程的 <a class="header-anchor" href="#【不演了-这篇文章是-ai-写的】我是如何用-cursor-快速生成一个-golang-新手教程的" aria-label="Permalink to &quot;【不演了，这篇文章是 AI 写的】我是如何用 Cursor 快速生成一个 Golang 新手教程的&quot;">​</a></h1><h3 id="前言-一次与-ai-的代码奇旅" tabindex="-1">前言：一次与 AI 的代码奇旅 <a class="header-anchor" href="#前言-一次与-ai-的代码奇旅" aria-label="Permalink to &quot;前言：一次与 AI 的代码奇旅&quot;">​</a></h3><p>恰好我最近一直在使用 Cursor，它就像一个不知疲倦、学识渊博的编程搭档。于是，一个想法在我脑海中萌生：我能不能和 Cursor 合作，从零开始，快速构建一个完整的 Go 语言入门教程库？</p><p>这个想法让我兴奋不已。这不仅是对 AI 能力的一次深度检验，也是对我自己学习和应用 Golang 知识的一次梳理。说干就干，我开始了这次独特的&quot;人机协作&quot;项目。</p><h3 id="项目寞生-从一个想法到清晰的教学大纲" tabindex="-1">项目寞生：从一个想法到清晰的教学大纲 <a class="header-anchor" href="#项目寞生-从一个想法到清晰的教学大纲" aria-label="Permalink to &quot;项目寞生：从一个想法到清晰的教学大纲&quot;">​</a></h3><p>我的目标是创建一个对新手友好、内容全面的 Golang 学习资源。我向 Cursor 下达了我的第一个指令：</p><blockquote><p>&quot;我想要创建一个 Golang 教学库，内容要覆盖从基础到进阶，并且包含几个实战小项目来帮助理解。你能帮我规划一下整体结构吗？&quot;</p></blockquote><p>Cursor 很快就给出了回应，建议了一个非常清晰的目录结构，包含三个主要部分：<code>basics</code>（基础）、<code>advanced</code>（进阶）和 <code>projects</code>（项目实践）。</p><p>我们经过几轮的讨论和微调，最终确定了详细的教学大纲：</p><ul><li><p><strong>基础部分 (<code>basics</code>)</strong>:</p><ul><li><code>01_variables_types.go</code>: 变量、常量和基本数据类型</li><li><code>02_control_flow.go</code>: <code>if-else</code>, <code>for</code>, <code>switch</code> 等流程控制</li><li><code>03_functions.go</code>: 函数的定义、参数和返回值</li><li><code>04_arrays_slices_maps.go</code>: 数组、切片和映射</li><li><code>05_structs_methods.go</code>: 结构体与方法，Go 语言的&quot;类&quot;</li><li><code>06_interfaces.go</code>: 接口，Go 语言多态的核心</li><li><code>07_error_handling.go</code>: Go 语言独特的错误处理机制</li></ul></li><li><p><strong>进阶部分 (<code>advanced</code>)</strong>:</p><ul><li><code>01_packages.go</code>: Go 语言的包管理</li><li><code>02_concurrency.go</code>: Goroutines 和 Channels，Go 语言的并发利器</li><li><code>03_file_operations.go</code>: 文件读写操作</li><li><code>04_network_http.go</code>: 构建 HTTP 客户端和服务器</li><li><code>05_strings_regexp.go</code>: 字符串处理和正则表达式</li><li><code>06_time_crypto.go</code>: 时间处理和加密/解密</li></ul></li><li><p><strong>项目实践 (<code>projects</code>)</strong>:</p><ul><li><code>calculator/</code>: 一个简单的命令行计算器</li><li><code>todo-cli/</code>: 一个待办事项管理工具</li><li><code>web-server/</code>: 一个基础的 Web 服务器</li></ul></li></ul><p>这个大纲几乎涵盖了 Golang 新手需要掌握的所有核心知识点。我非常满意，这为我们接下来的工作打下了坚实的基础。</p><h3 id="结对编程-与-ai-一起码代码" tabindex="-1">&quot;结对编程&quot;: 与 AI 一起码代码 <a class="header-anchor" href="#结对编程-与-ai-一起码代码" aria-label="Permalink to &quot;&quot;结对编程&quot;: 与 AI 一起码代码&quot;">​</a></h3><p>大纲确定后，我们便开始了内容填充工作。这个过程与其说是&quot;让 AI 生成代码&quot;，不如说是一场沉浸式的&quot;结对编程&quot;。</p><p>我的角色更像是一个&quot;领航员&quot;或者&quot;产品经理&quot;。我为每一个文件提出具体的需求：</p><blockquote><p>&quot;现在，请为 <code>basics/01_variables_types.go</code> 文件生成代码。请包含变量声明的各种方式（<code>var</code>, <code>:=</code>），以及 Go 的基本数据类型（<code>int</code>, <code>float64</code>, <code>string</code>, <code>bool</code>），并为每段代码配上清晰的中文注释，方便初学者理解。&quot;</p></blockquote><p>Cursor 则像一个高效的&quot;实现者&quot;，迅速生成符合要求的代码。比如，在生成并发编程的示例时，它不仅写出了 Goroutine 和 Channel 的使用方法，还贴心地用注释解释了为什么需要并发，以及 Channel 是如何保证数据同步的。</p><p>当然，AI 并非完美。有时它生成的代码可能过于简化，或者没有完全理解我的意图。这时，我就会进行追问和修正：</p><blockquote><p>&quot;这里的错误处理逻辑可以更优雅一些吗？使用 <code>if err != nil</code> 的模式，并给出具体的错误信息。&quot;</p></blockquote><blockquote><p>&quot;这个 Web 服务器的例子很好，但能不能再增加一个处理 <code>/hello</code> 路由的 handler，返回 &#39;Hello, World!&#39;？&quot;</p></blockquote><p>这种即时反馈和迭代的模式效率极高。我们一个文件一个文件地推进，从基础语法到并发编程，再到实战项目。整个过程行云流水，我几乎没有写多少样板代码，更多的时间花在了思考&quot;教什么&quot;和&quot;怎么教&quot;上。</p><p>最终，我们只花了非常短的时间，就完成了整个代码库的编写。这是我独立开发难以想象的速度。</p><h3 id="成果展示" tabindex="-1">成果展示 <a class="header-anchor" href="#成果展示" aria-label="Permalink to &quot;成果展示&quot;">​</a></h3><p>下面就是我们这次合作的最终成果——一个结构清晰、内容丰富的 Golang 教学库：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>goang/</span></span>
<span class="line"><span>  - advanced/</span></span>
<span class="line"><span>    - 01_packages.go</span></span>
<span class="line"><span>    - 02_concurrency.go</span></span>
<span class="line"><span>    - 03_file_operations.go</span></span>
<span class="line"><span>    - 04_network_http.go</span></span>
<span class="line"><span>    - 05_strings_regexp.go</span></span>
<span class="line"><span>    - 06_time_crypto.go</span></span>
<span class="line"><span>  - basics/</span></span>
<span class="line"><span>    - 01_variables_types.go</span></span>
<span class="line"><span>    - 02_control_flow.go</span></span>
<span class="line"><span>    - 03_functions.go</span></span>
<span class="line"><span>    - 04_arrays_slices_maps.go</span></span>
<span class="line"><span>    - 05_structs_methods.go</span></span>
<span class="line"><span>    - 06_interfaces.go</span></span>
<span class="line"><span>    - 07_error_handling.go</span></span>
<span class="line"><span>  - projects/</span></span>
<span class="line"><span>    - calculator/</span></span>
<span class="line"><span>      - main.go</span></span>
<span class="line"><span>    - todo-cli/</span></span>
<span class="line"><span>      - main.go</span></span>
<span class="line"><span>    - web-server/</span></span>
<span class="line"><span>      - main.go</span></span>
<span class="line"><span>  - README.md</span></span></code></pre></div><p>每一份代码文件都经过了我的审核和微调，确保了质量和可读性。例如，在 <code>02_concurrency.go</code> 中，我们不仅有代码，还有详尽的解释：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... (部分代码示例) ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 channel 进行 goroutine 间通信</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> messageProducer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> chan&lt;-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 向 channel 发送消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello from producer!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This is the second message.&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ch) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送完毕后关闭 channel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> messageConsumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;-chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WaitGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 从 channel 接收消息，直到 channel 关闭</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ch {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Consumed:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre></div><p>这段代码清晰地展示了 Go 并发编程的核心魅力。</p><h3 id="感想与反思-拥抱-ai-重塑开发范式" tabindex="-1">感想与反思：拥抱 AI，重塑开发范式 <a class="header-anchor" href="#感想与反思-拥抱-ai-重塑开发范式" aria-label="Permalink to &quot;感想与反思：拥抱 AI，重塑开发范式&quot;">​</a></h3><p>这次经历让我对 AI 辅助编程有了全新的认识。</p><p><strong>AI 是加速器，而不是替代品。</strong> Cursor 帮我处理了大量重复和模式化的工作，让我能更专注于高层次的架构设计和教学内容的规划。它极大地提升了开发效率。</p><p><strong>AI 是领航员，也是副驾驶。</strong> 当我对某个知识点（比如 Go 的加密库）有些模糊时，我可以随时向它提问，它能快速给出示例和解释。这种&quot;即问即答&quot;的学习方式非常高效。</p><p><strong>人类的智慧和经验依然是核心。</strong> AI 生成的代码需要被审查，AI 的方案需要被评估。最终产品的质量，依然取决于开发者的经验、审美和对需求的理解。我们的角色，正从&quot;代码工人&quot;转变为&quot;AI 指挥家&quot;。</p><p>回到掘金活动的主题，&quot;技术为金石，笔锋定乾坤&quot;。AI 正是那块能点石成金的&quot;技术金石&quot;，而我们的&quot;笔锋&quot;，则体现在如何提出好问题、如何设计好架构、如何用我们的思想和经验去驾驭这股强大的力量。</p><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>使用 Cursor 快速生成这个 Golang 教学库是一次非常愉快和有启发性的体验。它让我看到了未来软件开发的一种新范式：人机协作，各取所长，共同创造。</p><p>如果你也对 AI 编程感兴趣，不妨也试试看。选择一个你感兴趣的小项目，把它作为和 AI &quot;结对编程&quot;的起点，你或许会打开一扇新世界的大门。</p><p>最后，欢迎大家访问我这个（即将开源）的 Golang 教学库，如果它能帮助到你，将是我最大的荣幸！</p>`,37)]))}const g=a(e,[["render",o]]);export{k as __pageData,g as default};
