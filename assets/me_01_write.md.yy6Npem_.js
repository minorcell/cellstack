import{_ as l,c as a,o as e,a4 as t}from"./chunks/framework.Bvn9uf2i.js";const u=JSON.parse('{"title":"博客写作规范","description":"参考阮一峰博客风格的写作规范指南","frontmatter":{"title":"博客写作规范","description":"参考阮一峰博客风格的写作规范指南","head":[["link",{"rel":"canonical","href":"https://stack.mcell.topme/01_write"}],["meta",{"property":"og:url","content":"https://stack.mcell.topme/01_write"}]]},"headers":[],"relativePath":"me/01_write.md","filePath":"me/01_write.md","lastUpdated":1755363488000}'),n={name:"me/01_write.md"};function r(o,s,i,p,c,g){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="技术写作核心规范-单线结构法则" tabindex="-1"><strong>技术写作核心规范：单线结构法则</strong> <a class="header-anchor" href="#技术写作核心规范-单线结构法则" aria-label="Permalink to &quot;**技术写作核心规范：单线结构法则**&quot;">​</a></h1><p><strong>核心理念</strong>：</p><blockquote><p><strong>一篇文章 = 一条逻辑链 = 解决一个核心问题</strong><br> 评价标准：清晰性 &gt; 艺术性，结构决定理解成本。</p></blockquote><hr><h2 id="结构设计原则" tabindex="-1"><strong>结构设计原则</strong> <a class="header-anchor" href="#结构设计原则" aria-label="Permalink to &quot;**结构设计原则**&quot;">​</a></h2><ol><li><p><strong>单线贯穿</strong></p><ul><li>按<strong>线性顺序</strong>组织内容：<code>背景→问题→原理→解决方案→验证→总结</code></li><li>禁用多线程叙述（如同时讲解 A/B 两种技术对比+各自实现+优劣分析）</li><li><strong>类比</strong>：景区单一路线图，读者只需按箭头前进。</li></ul></li><li><p><strong>复杂问题拆分</strong></p><ul><li>若涉及星状/层次结构（如图）：<br><img src="https://cdn.beekka.com/blogimg/asset/202401/bg2024012311.webp" alt="" loading="lazy"><br><strong>→ 拆分为多篇文章</strong><br><em>例：</em>《MySQL 索引原理》《索引优化实战》《索引失效场景分析》互为独立单线文。</li></ul></li></ol><h2 id="内容表达准则" tabindex="-1">内容表达准则 <a class="header-anchor" href="#内容表达准则" aria-label="Permalink to &quot;内容表达准则&quot;">​</a></h2><ol start="3"><li><p><strong>起点明确</strong></p><ul><li>首段直指核心问题：<br><em>错误示范</em>：“本文将介绍分布式系统的多个知识点…”<br><em>正确示范</em>：“本文解决如何用 Raft 算法实现分布式共识。”</li></ul></li><li><p><strong>递进逻辑</strong></p><ul><li>每一节是下一节的<strong>必要基础</strong>，形成依赖链：<br><em>例</em>：<code>什么是Raft? → 选举机制 → 日志复制 → 异常处理</code></li><li>读者卡顿时能精准定位薄弱环节。</li></ul></li><li><p><strong>终点闭环</strong></p><ul><li>结尾回归起点问题，明确结论：<br><em>例</em>：“通过以上 5 步，我们实现了高可用的共识系统（首段问题已解决）”。</li></ul></li></ol><h2 id="思维整理技巧" tabindex="-1">思维整理技巧 <a class="header-anchor" href="#思维整理技巧" aria-label="Permalink to &quot;思维整理技巧&quot;">​</a></h2><ol start="6"><li><p><strong>从网状思维到单线表达</strong></p><ul><li>写作前用思维导图整理关联点（如图）：<br><img src="https://cdn.beekka.com/blogimg/asset/202401/bg2024012313.webp" alt="" loading="lazy"></li><li><strong>关键动作</strong>：删除分支，保留主干路径 → 形成文章大纲。</li></ul></li><li><p><strong>读者视角验证</strong></p><ul><li>自测问题： <ul><li>是否需前置知识才能理解本节？</li><li>本节结论是否为下节前提？</li><li>删除任意段落会断裂逻辑链吗？</li></ul></li></ul></li></ol><h2 id="避坑指南" tabindex="-1">避坑指南 <a class="header-anchor" href="#避坑指南" aria-label="Permalink to &quot;避坑指南&quot;">​</a></h2><p><strong>禁止行为</strong>：</p><ul><li>突然插入技术对比（除非是主线必要环节）</li><li>用“另外”“需要注意的是”引入支线话题</li><li>同一段落混合概念解释、代码示例、性能数据</li></ul><p><strong>补救方案</strong>：</p><ul><li>支线内容标为“延伸阅读”或另开新文</li><li>多维度分析（如优缺点）改用表格呈现，保持视觉线性</li></ul><h2 id="规范应用示例" tabindex="-1"><strong>规范应用示例</strong> <a class="header-anchor" href="#规范应用示例" aria-label="Permalink to &quot;**规范应用示例**&quot;">​</a></h2><p><strong>主题</strong>：如何理解 React Hooks？<br><strong>单线结构</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 为什么需要Hooks?（类组件痛点）</span></span>
<span class="line"><span>2. useState核心逻辑（状态管理单线）</span></span>
<span class="line"><span>3. useEffect执行机制（生命周期映射）</span></span>
<span class="line"><span>4. 自定义Hook封装方法（逻辑复用）</span></span>
<span class="line"><span>5. 常见误区及解决方案（错误→正确）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><em>拆分点</em>：<code>useContext原理</code>、<code>Hooks vs Redux对比</code> 另写新文。</p><div class="tip custom-block"><p class="custom-block-title">执行口诀</p><p><strong>“一点贯穿，步步为营；<br> 复杂切块，逻辑闭环。”</strong><br> 此规范可显著降低读者认知负荷，尤其适合教程、技术文档、故障排查类写作。</p></div>`,20)]))}const b=l(n,[["render",r]]);export{u as __pageData,b as default};
