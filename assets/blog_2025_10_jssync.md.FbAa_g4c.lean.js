import{_ as i,c as a,o as n,a7 as l}from"./chunks/framework.DjMA4zLk.js";const e="/assets/005.BUhBU_MT.avif",t="/assets/019.BAZPRTFi.jpg",g=JSON.parse('{"title":"JavaScript 运行机制详解：再谈 Event Loop","description":"本文从经典的 Promise 与 setTimeout 执行顺序问题入手，深入浅出地剖析了 JavaScript 的单线程模型、事件循环（Event Loop）机制。通过辨析宏任务与微任务的区别与优先级，帮助你彻底理解 JS 异步执行的底层原理，看懂页面卡顿的真相。","frontmatter":{"title":"JavaScript 运行机制详解：再谈 Event Loop","description":"本文从经典的 Promise 与 setTimeout 执行顺序问题入手，深入浅出地剖析了 JavaScript 的单线程模型、事件循环（Event Loop）机制。通过辨析宏任务与微任务的区别与优先级，帮助你彻底理解 JS 异步执行的底层原理，看懂页面卡顿的真相。","tags":["JavaScript","浏览器","事件循环","Promise","异步机制"],"head":[["link",{"rel":"canonical","href":"https://stack.mcell.topblog/2025/10_jssync"}],["meta",{"property":"og:url","content":"https://stack.mcell.topblog/2025/10_jssync"}]]},"headers":[],"relativePath":"blog/2025/10_jssync.md","filePath":"blog/2025/10_jssync.md","lastUpdated":1755368679000}'),p={name:"blog/2025/10_jssync.md"};function r(h,s,o,k,c,d){return n(),a("div",null,s[0]||(s[0]=[l("",46)]))}const u=i(p,[["render",r]]);export{g as __pageData,u as default};
