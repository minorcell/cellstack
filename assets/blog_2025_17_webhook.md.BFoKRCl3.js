import{_ as i,c as a,o as n,a2 as l}from"./chunks/framework.CGIWSPU7.js";const o=JSON.parse('{"title":"GitHub 一推送，我的服务器就知道！揭秘 Webhook 事件驱动机制","description":"深入理解 Webhook 的工作原理与实践应用，从基本概念到 GitHub Webhook 实战演示，掌握事件驱动系统设计","frontmatter":{"title":"GitHub 一推送，我的服务器就知道！揭秘 Webhook 事件驱动机制","description":"深入理解 Webhook 的工作原理与实践应用，从基本概念到 GitHub Webhook 实战演示，掌握事件驱动系统设计","date":"2025-01-17T00:00:00.000Z","tags":["Webhook","事件驱动","GitHub","CI/CD","系统集成","Go"],"head":[["link",{"rel":"canonical","href":"https://stack.mcell.topblog/2025/17_webhook"}],["meta",{"property":"og:url","content":"https://stack.mcell.topblog/2025/17_webhook"}]]},"headers":[],"relativePath":"blog/2025/17_webhook.md","filePath":"blog/2025/17_webhook.md","lastUpdated":1755147736000}'),t={name:"blog/2025/17_webhook.md"};function p(h,s,k,e,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="github-一推送-我的服务器就知道-揭秘-webhook-事件驱动" tabindex="-1">GitHub 一推送，我的服务器就知道！揭秘 Webhook 事件驱动 <a class="header-anchor" href="#github-一推送-我的服务器就知道-揭秘-webhook-事件驱动" aria-label="Permalink to &quot;GitHub 一推送，我的服务器就知道！揭秘 Webhook 事件驱动&quot;">​</a></h1><p>最近，GitHub Copilot、自动化部署等概念频繁出现，无不指向更智能、更高效的开发流程。而在这背后，有一个常被提及却又可能未被充分理解的&quot;幕后工作者&quot;—— <strong>Webhook</strong>。</p><p>或许你对 API（应用程序编程接口）和 WebSocket（全双工通信协议）已相当熟悉，那么 Webhook 又扮演着怎样的角色？它与这些成熟技术有何异同？正如我常说的，<strong>任何技术并无绝对的优劣，只有适用的场景</strong>。在深入探讨 Webhook 的运作机制之前，我们有必要先明晰其在不同通信范式中的定位与价值。</p><h3 id="api、websocket-与-webhook-场景决定选择" tabindex="-1">API、WebSocket 与 Webhook：场景决定选择 <a class="header-anchor" href="#api、websocket-与-webhook-场景决定选择" aria-label="Permalink to &quot;API、WebSocket 与 Webhook：场景决定选择&quot;">​</a></h3><p>在构建自动化和集成系统时，API、WebSocket 和 Webhook 都是实现不同系统间数据交换的关键手段。然而，它们各自的工作模式和最佳适用场景却有着显著差异。</p><ol><li><p>API (Application Programming Interface) - 主动请求-响应模式</p><p>这是最普遍的通信模式。客户端作为发起方，主动向服务器的 API 接口发送请求，服务器处理后返回响应。这类似于你拨打客服电话咨询问题，一问一答，交互由请求方主导。</p><ul><li><strong>特点</strong>：请求驱动、同步响应、实时性取决于请求频率。</li><li><strong>适用场景</strong>：绝大多数的 CRUD（创建、读取、更新、删除）操作、数据查询、身份验证等。当你需要获取特定数据或触发特定操作时，主动调用是其核心优势。</li></ul></li><li><p>WebSocket - 持久双向通信</p><p>WebSocket 建立了一个持久的双向通信通道。一旦连接建立，服务器和客户端可以随时互相发送消息，无需重复握手。这好比你和同事通过对讲机实时对话，无需每次发言都建立新连接。</p><ul><li><strong>特点</strong>：全双工、低延迟、高实时性、连接持续维护。</li><li><strong>适用场景</strong>：在线聊天、多人协作应用、实时数据仪表板、在线游戏等需要极高实时性和持续数据流的场景。</li></ul></li><li><p>Webhook - 事件驱动的推送机制</p><p>Webhook 的工作方式与前两者截然不同。它不要求你主动轮询数据，也不需要维持持久连接。相反，Webhook 更像是一种&quot;订阅&quot;模式：当源系统中的某个特定事件（例如 GitHub 上有新代码提交，或飞书群组中接收到新消息）发生时，源系统会主动向你预先配置好的一个 HTTP URL 发送一个 POST 请求，并将事件相关数据作为请求体&quot;推送&quot;给你。</p><ul><li><strong>特点</strong>：<strong>被动接收</strong>、<strong>事件驱动</strong>、高实时性、无需维护连接、<strong>信息流由事件发生方发起</strong>。</li><li><strong>适用场景</strong>：<strong>状态变更通知</strong>、<strong>自动化流程触发</strong>、系统间集成。当你的系统需要在某个外部事件发生时<strong>立即做出响应</strong>，而无需频繁查询或保持常开连接时，Webhook 是非常高效且简洁的选择。</li></ul></li></ol><p>因此，<strong>何时选择 Webhook？</strong> 当你的业务逻辑依赖于&quot;知晓并即时响应外部系统特定事件&quot;时，Webhook 的优势便凸显无疑。它避免了客户端频繁轮询外部系统状态所带来的资源浪费和潜在延迟，也规避了 WebSocket 在连接管理上的复杂性。</p><h3 id="webhook-的核心应用场景与实践案例" tabindex="-1">Webhook 的核心应用场景与实践案例 <a class="header-anchor" href="#webhook-的核心应用场景与实践案例" aria-label="Permalink to &quot;Webhook 的核心应用场景与实践案例&quot;">​</a></h3><p>理解 Webhook 的工作原理后，它的实际价值便一目了然。它极大地简化了系统间的联动和自动化流程。</p><ul><li><p><strong>CI/CD (持续集成/持续部署) 流程触发</strong>：</p><ul><li><strong>场景</strong>：当开发人员向代码仓库（如 GitHub/GitLab）提交新代码（<code>push</code> 事件）或合并拉取请求（<code>merge</code>事件）时。</li><li><strong>Webhook 应用</strong>：代码托管平台通过 Webhook 将这些事件通知给 Jenkins、GitHub Actions、GitLab CI 等持续集成/持续部署工具。这些工具接收到 Webhook 通知后，即可自动触发代码的构建、测试和部署流程。若无 Webhook，CI/CD 工具将不得不周期性地轮询代码仓库，这不仅会增加系统负担，也可能导致部署延迟。Webhook 实现了&quot;即时响应&quot;，显著提升了开发效率和部署速度。</li></ul></li><li><p><strong>团队协作与消息通知</strong>：</p><ul><li><strong>场景</strong>：飞书、钉钉、企业微信、Slack 等协作平台中产生新消息、审批流程状态变更或系统发生警报时。</li><li><strong>Webhook 应用</strong>：这些平台普遍提供 Webhook 功能，允许你将特定事件（如群消息、审批通知）推送至自定义服务。你的服务可进一步处理这些信息，例如将其转发到其他内部系统、记录日志，或触发自动化告警。</li><li><strong>案例</strong>：我们熟悉的&quot;钉钉机器人&quot;或&quot;飞书机器人&quot;的实现，其底层很多正是通过 Webhook 来接收消息并进行自动化回复或处理的。</li></ul></li><li><p><strong>跨系统数据同步与集成</strong>：</p><ul><li><strong>场景</strong>：电商平台产生新订单、支付系统完成一笔交易、或者客户关系管理（CRM）系统中的客户信息发生变更。</li><li><strong>Webhook 应用</strong>：电商平台或支付系统通过 Webhook 将实时更新的订单/支付状态通知给你的库存管理系统、物流服务或 CRM 系统，从而确保不同业务系统间的数据一致性和业务流程的顺畅。</li></ul></li></ul><h3 id="github-webhook-实践-剖析-钩子-的运作" tabindex="-1">GitHub Webhook 实践：剖析&quot;钩子&quot;的运作 <a class="header-anchor" href="#github-webhook-实践-剖析-钩子-的运作" aria-label="Permalink to &quot;GitHub Webhook 实践：剖析&quot;钩子&quot;的运作&quot;">​</a></h3><p>理论结合实践，让我们以 GitHub Webhook 为例，具体演示它是如何&quot;钩住&quot;你的代码仓库，并向你的本地服务器发送通知的。</p><p><strong>我们的目标</strong>：当 GitHub 仓库发生新的 <code>push</code> 事件时，本地运行的 Go 服务器能够立即接收到通知，并解析打印出相关事件信息。</p><h4 id="_1-准备本地-go-服务器" tabindex="-1">1. 准备本地 Go 服务器 <a class="header-anchor" href="#_1-准备本地-go-服务器" aria-label="Permalink to &quot;1. 准备本地 Go 服务器&quot;">​</a></h4><p>首先，我们需要一个能够监听并处理 HTTP POST 请求的 Go 服务器。它将作为 Webhook 的&quot;接收端&quot;。</p><p>创建一个 <code>main.go</code> 文件：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encoding/json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">io/ioutil</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net/http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crypto/hmac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 用于 HMAC 签名验证，生产环境强烈建议启用</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crypto/sha256</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encoding/hex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// GitHubPushEvent 结构体用于解析 GitHub Push 事件的简化 JSON 数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实际的 GitHub Payload 非常复杂，这里只选取了部分字段用于演示</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GitHubPushEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Ref        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;ref&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 分支信息，例如 &quot;refs/heads/master&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Before     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;before&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // push 前的 commit SHA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	After      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;after&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // push 后的 commit SHA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Repository </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Name          </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;name&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 仓库名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		FullName      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;full_name&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 仓库完整名称 (owner/repo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		HTMLURL       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;html_url&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 仓库 URL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	} </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`json:&quot;repository&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Pusher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Name  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;name&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // push 者用户名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;email&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // push 者邮箱</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	} </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`json:&quot;pusher&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Commits []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;message&quot;\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // commit 消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Author </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;name&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		} </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`json:&quot;author&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	} </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`json:&quot;commits&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// verifySignature 函数用于验证 GitHub Webhook 请求的签名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生产环境务必实现此功能，以确保请求的合法性，防止伪造攻击。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verifySignature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">signature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">secret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果未提供签名或密钥，则视为验证失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// GitHub 的签名通常以 &quot;sha256=&quot; 开头，需要去除前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signature) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signature[:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sha256=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	signatureHex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signature[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 计算 payload 的 HMAC SHA256 签名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	mac </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hmac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sha256.New, []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(secret))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	mac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	expectedMAC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 将接收到的签名（hex 编码）解码为字节数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	actualMAC, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DecodeString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signatureHex)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;签名解码失败: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 比较计算出的签名和接收到的签名是否一致</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hmac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(actualMAC, expectedMAC)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 定义一个 HTTP 处理函数，用于接收 GitHub Webhook 请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HandleFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/github-webhook&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">w</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResponseWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 1. 检查请求方法：Webhook 通常是 POST 请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.Method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.MethodPost {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;只支持 POST 方法&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, http.StatusMethodNotAllowed)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 2. 读取请求体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		payload, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ioutil.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r.Body)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;无法读取请求体&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, http.StatusInternalServerError)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;读取请求体错误: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.Body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确保关闭请求体，避免资源泄露</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 3. (可选但推荐) 验证 GitHub Secret Token</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 在 GitHub Webhook 配置中设置的密钥，这里需要与你设置的密钥保持一致</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> githubSecret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your_secret_token_here&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // **请替换为你在 GitHub 配置的实际密钥**</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		githubSignature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.Header.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-Hub-Signature-256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verifySignature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload, githubSignature, githubSecret) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		    http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;签名验证失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, http.StatusUnauthorized)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		    log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Webhook 签名验证失败，IP: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r.RemoteAddr)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		    return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 4. 解析 JSON Payload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubPushEvent</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unmarshal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;无法解析 JSON Payload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, http.StatusBadRequest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JSON 反序列化错误: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, Payload: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 5. 处理 Webhook 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--- 接收到 GitHub Push 事件 ---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 将 \`your-username/your-repo-name\` 替换为 \`minorcell/xgit\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  仓库: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> (URL: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.Repository.FullName, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/minorcell/xgit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  分支: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.Ref)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  推送者: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.Pusher.Name, event.Pusher.Email)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.Commits) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  最新提交 (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 条):&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.Commits))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _, commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.Commits {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;    - [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, commit.Author.Name, commit.Message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  无新提交信息。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-----------------------------&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 6. 返回成功响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		w.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(http.StatusOK)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Webhook 已成功接收!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 启动 HTTP 服务器监听在 8080 端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;本地服务器正在监听端口 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，等待 GitHub Webhook 请求...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, port)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fatal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ListenAndServe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br></div></div><p>运行你的 Go 服务器：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.go</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时，你的本地服务器已在 <code>http://localhost:8080/github-webhook</code> 路径下等待请求。</p><h4 id="_2-将本地服务器暴露到公网" tabindex="-1">2. 将本地服务器暴露到公网 <a class="header-anchor" href="#_2-将本地服务器暴露到公网" aria-label="Permalink to &quot;2. 将本地服务器暴露到公网&quot;">​</a></h4><p>GitHub 的 Webhook 服务无法直接访问你的本地 <code>localhost</code> 地址。因此，你需要一个工具将本地端口映射到公网，使得 GitHub 可以访问。这里，我推荐使用 <strong>ngrok</strong>（或类似服务如 frp、Cloudflare Tunnel）。</p><p>如果你尚未安装 ngrok：</p><ul><li><strong>Windows:</strong> 从官网下载 <code>ngrok.exe</code> 后直接运行。</li><li><strong>macOS/Linux:</strong> <code>brew install ngrok</code> 或下载后解压。</li></ul><p>运行 ngrok，将你的 8080 端口暴露到公网：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ngrok</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ngrok 会提供一个临时的公网 HTTPS URL，例如 <code>https://abcdef123456.ngrok-free.app</code>。请记下这个 URL，它将作为 GitHub Webhook 的 Payload URL。</p><h4 id="_3-配置-github-webhook" tabindex="-1">3. 配置 GitHub Webhook <a class="header-anchor" href="#_3-配置-github-webhook" aria-label="Permalink to &quot;3. 配置 GitHub Webhook&quot;">​</a></h4><p>现在，我们前往 GitHub 平台进行 Webhook 配置。</p><ol><li><strong>导航至你的 GitHub 仓库</strong>：选择一个你拥有管理员权限的仓库。你可以使用 <code>minorcell/xgit</code> 这样的示例仓库进行测试。</li><li><strong>进入 Settings（设置）</strong> -&gt; <strong>Webhooks</strong> -&gt; <strong>Add webhook（添加 Webhook）</strong> 。</li><li><strong>Payload URL</strong>：在此处粘贴你通过 ngrok 获取的公网 URL，并追加你的处理路径，例如 <code>https://abcdef123456.ngrok-free.app/github-webhook</code>。</li><li><strong>Content type（内容类型）</strong> ：选择 <code>application/json</code>。这是 GitHub 发送 Webhook 数据时使用的格式。</li><li><strong>Secret（密钥）</strong> ：<strong>在生产环境中，强烈建议设置并严格验证此密钥！</strong> 它可以用于验证请求是否确实来自 GitHub，防止伪造请求。此处为演示目的可暂时留空或设置一个简单字符串，但请记住在 Go 代码中添加相应的验证逻辑（代码中已提供注释）。<strong>请确保这里设置的密钥与 Go 代码中的 <code>githubSecret</code> 变量值一致。</strong></li><li><strong>Which events would you like to trigger this webhook?（选择触发此 Webhook 的事件）</strong> ：为本次演示，我们选择 <code>Just the push event</code>（仅推送事件）。你也可以选择 <code>Send me everything</code> 或根据需求自定义。</li><li><strong>Active（激活）</strong> ：确保此选项被勾选，以启用 Webhook。</li><li>点击 <strong>Add webhook</strong> 完成配置。</li></ol><h3 id="效果验证与深度思考" tabindex="-1">效果验证与深度思考 <a class="header-anchor" href="#效果验证与深度思考" aria-label="Permalink to &quot;效果验证与深度思考&quot;">​</a></h3><p>现在，一切已准备就绪！回到你的 GitHub 仓库，进行一次代码提交（<code>git push</code>）操作。</p><p>你会立即在你的本地 Go 服务器控制台中看到类似以下内容的日志输出：</p><div class="language-log vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">07</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 22:07:36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --- 接收到 GitHub Push 事件 ---</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">07</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 22:07:36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   仓库: minorcell/xgit (URL: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">https://github.com/minorcell/xgit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">07</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 22:07:36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   分支: refs/heads/master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">07</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 22:07:36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   推送者: mcell &lt;your-email@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">example.com</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">07</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 22:07:36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   最新提交 (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 条):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">07</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 22:07:36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     - [mcell]: Initial commit</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">07</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 22:07:36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -----------------------------</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>是不是相当直观和高效？</strong> 这清楚地表明，GitHub 上的特定事件，被成功地&quot;推送&quot;到了你的本地服务器，并且你的服务器能够及时地接收并处理这些信息。这正是 Webhook 所提供的强大能力：<strong>事件发生，我即刻感知，并能随之行动。</strong></p><p>Webhook 的核心在于其<strong>事件驱动的&quot;推&quot;模式</strong>，这与传统的&quot;拉&quot;模式（如 API 轮询）形成了鲜明对比。在需要实时响应和高效资源利用的场景下，Webhook 的优势显而易见。让不同的服务或系统，在不了解彼此内部复杂实现细节的情况下，仅仅通过事件和统一的 HTTP 回调机制进行高效协同，这正是构建可伸缩、易维护的微服务架构和自动化工作流的关键。</p><p>然而，正如任何技术一样，便利性也伴随着挑战。Webhook 的安全性是部署时不可忽视的基石。Payload URL 必须是 HTTPS，Secret Token 的严格验证（防止请求伪造）、IP 白名单设置、以及对接收到的数据进行严谨的输入校验，都是在生产环境中必须遵循的最佳实践。<strong>你是否在你的项目中对 Webhook 的安全性做足了功课？</strong></p><p>希望这篇博客能帮助你更深入地理解 Webhook 的基本原理、适用场景及其在现代软件架构中的重要作用。技术的魅力在于其解决实际问题的能力，而 Webhook 正是这样一种能够显著提升系统响应力与自动化水平的工具。在你的日常开发或架构设计中，是否还有其他能用 Webhook 解决的场景？欢迎在评论区分享你的经验与独到见解，共同探讨技术的无限可能！</p>`,38)]))}const d=i(t,[["render",p]]);export{o as __pageData,d as default};
