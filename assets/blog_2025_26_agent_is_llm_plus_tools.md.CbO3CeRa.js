import{_ as e,c as l,o as t,a9 as a}from"./chunks/framework.DsVI9alt.js";const L=JSON.parse('{"title":"Agent = LLM + Tools","description":"深入浅出地讲解 AI Agent 的本质，从 LLM 到 Tools，从宿主环境到执行机制，用一个简洁的公式帮你理解 Claude Code、Codex 等智能体的工作原理。","frontmatter":{"title":"Agent = LLM + Tools","description":"深入浅出地讲解 AI Agent 的本质，从 LLM 到 Tools，从宿主环境到执行机制，用一个简洁的公式帮你理解 Claude Code、Codex 等智能体的工作原理。","author":"mcell","tags":["AI Agent","LLM","Claude Code","人工智能","大语言模型","Tools","智能体","AI工程"],"keywords":["AI Agent教程","LLM应用","Claude Code原理","智能体开发","Agent工作原理","大语言模型工具","AI Agent架构","宿主环境","ReAct框架","提示词工程"],"head":[["link",{"rel":"canonical","href":"https://stack.mcell.topblog/2025/26_agent_is_llm_plus_tools"}],["meta",{"property":"og:url","content":"https://stack.mcell.topblog/2025/26_agent_is_llm_plus_tools"}]]},"headers":[],"relativePath":"blog/2025/26_agent_is_llm_plus_tools.md","filePath":"blog/2025/26_agent_is_llm_plus_tools.md","lastUpdated":1761228892000}'),n={name:"blog/2025/26_agent_is_llm_plus_tools.md"};function s(i,o,p,r,d,c){return t(),l("div",null,o[0]||(o[0]=[a('<p><img src="https://stack-mcell.tos-cn-shanghai.volces.com/064.png" alt="064.png" loading="lazy"></p><h1 id="agent-llm-tools" tabindex="-1">Agent = LLM + Tools <a class="header-anchor" href="#agent-llm-tools" aria-label="Permalink to &quot;Agent = LLM + Tools&quot;">​</a></h1><p>最近，AI Agent 这个词非常火。</p><p>比如 Claude Code CLI、Codex，它能像个程序员一样，在你的命令行里读写文件、执行代码。很多人觉得很神奇，它到底是怎么做到的？</p><p>今天，我想谈谈我的理解。一句话就能概括。</p><h2 id="核心公式" tabindex="-1">核心公式 <a class="header-anchor" href="#核心公式" aria-label="Permalink to &quot;核心公式&quot;">​</a></h2><p>我的观点是，AI Agent 的核心，就是下面这个公式：</p><p><strong>Agent = LLM + Tools</strong></p><p>Agent（智能体），等于 LLM（大语言模型），加上 Tools（工具）。</p><p>为什么这么说？我们来拆解一下。</p><h2 id="llm-思考的大脑" tabindex="-1">LLM：思考的大脑 <a class="header-anchor" href="#llm-思考的大脑" aria-label="Permalink to &quot;LLM：思考的大脑&quot;">​</a></h2><p>LLM，比如 GPT-5 或 Claude 4.5，是 Agent 的“大脑”。</p><p>它非常聪明，擅长阅读、理解、思考、推理和做决策。你给它一个复杂的目标，它能帮你拆解成一步步的计划。</p><p>但是，LLM 本身有一个巨大的限制：<strong>它是一个封闭的“黑盒”</strong>。</p><p>它无法感知外部世界。你问它“我的桌面上有什么文件？”，它不知道。你让它“帮我把 A 文件的内容复制到 B 文件”，它也做不到。</p><p>它只能“想”，不能“做”。</p><h2 id="tools-连接世界的手脚" tabindex="-1">Tools：连接世界的手脚 <a class="header-anchor" href="#tools-连接世界的手脚" aria-label="Permalink to &quot;Tools：连接世界的手脚&quot;">​</a></h2><p>要让 LLM “做”起来，就需要 Tools（工具）。</p><p>Tools，就是 Agent 的“手脚”和“感官”。它们是 LLM 连接外部世界的桥梁。</p><p>LLM 决定“做什么”（比如“读取 A 文件”），它不自己去读，而是去“调用”一个叫 <code>Read Tool</code> 的工具。这个工具负责真正执行操作，然后把结果（文件内容）返回给 LLM。</p><p>所以，常见的工具可能包括：</p><ul><li><code>Read Tool</code>：读取文件或网页内容。</li><li><code>Edit Tool</code>：修改或写入文件。</li><li><code>Delete Tool</code>：删除文件。</li><li><code>Find Tool</code>：搜索信息。</li><li><code>Execute Tool</code>：执行一段代码或命令。</li></ul><p>LLM 负责决策，Tools 负责执行。两者结合，Agent 就能感知和操作外部世界了。</p><h2 id="关键抽象-宿主环境" tabindex="-1">关键抽象：宿主环境 <a class="header-anchor" href="#关键抽象-宿主环境" aria-label="Permalink to &quot;关键抽象：宿主环境&quot;">​</a></h2><p>Tools 到底是什么？</p><p>我们可以再抽象一点：<strong>Tools 是“宿主环境”能力的封装。</strong></p><p>这句话是关键。</p><ol><li><p>在 Claude Code CLI 这个例子里，“宿主环境”就是你的<strong>操作系统 (OS)</strong>。 Tools 封装的就是 <code>shell</code> 命令（比如 <code>ls</code>, <code>cat</code>, <code>sed</code>），让 LLM 能够操作你的本地文件。</p></li><li><p>如果我们想做一个“浏览器 Agent”呢？ “宿主环境”就是<strong>浏览器</strong>。 我们就需要封装浏览器提供的能力作为 Tools。</p></li></ol><h2 id="agent-的本质" tabindex="-1">Agent 的本质 <a class="header-anchor" href="#agent-的本质" aria-label="Permalink to &quot;Agent 的本质&quot;">​</a></h2><p>所以，Agent 的创造逻辑就清晰了：</p><p>理论上，<strong>任何一个宿主环境，只要它提供的能力可以被封装成 Tools，我们就能基于它创造 Agent。</strong></p><ul><li>宿主环境是 OS，Agent 就是 OS 助手。</li><li>宿主环境是浏览器，Agent 就是浏览器助手。</li><li>宿主环境是数据库，Tools 就是 SQL 执行器，Agent 就是数据分析师。</li><li>宿主环境是 API 服务（比如天气、股票），Agent 就是你的生活助理。</li></ul><h2 id="不可或缺的-脚手架" tabindex="-1">不可或缺的“脚手架” <a class="header-anchor" href="#不可或缺的-脚手架" aria-label="Permalink to &quot;不可或缺的“脚手架”&quot;">​</a></h2><p>当然，一个真正好用的 Agent，光有 <code>LLM + Tools</code> 还不够。</p><p>它还需要很多“脚手架”来支撑运转，比如：</p><ul><li><strong>上下文管理 (Context Management)</strong>：LLM 的“记忆”有限（即上下文窗口），如何只把最关键的信息喂给它？</li><li><strong>记忆 (Memory)</strong>：如何让 Agent 拥有短期记忆和长期记忆，从过去的经验中学习？</li><li><strong>执行机制 (Execution Mechanism)</strong>：如何设计一个循环（Loop），让“思考”和“行动”能交替往复、持续运行？（比如 ReAct 框架）</li><li><strong>提示词工程 (Prompt Engineering)</strong>：如何写好 Prompt，让 LLM 知道自己的目标、角色和手头有哪些工具可用？</li></ul><p>但万变不离其宗，这些机制都是为了让 <code>LLM + Tools</code> 这个核心公式更高效、更稳定地工作。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>Agent = LLM + Tools</code>。</p><p>这个简洁的公式，为我们定义了一种新的软件范式。它告诉我们，如何将 LLM 的“智能”与现实世界的“能力”结合起来，创造出能自主感知和操作的智能体。</p><p>（完）</p>',41)]))}const h=e(n,[["render",s]]);export{L as __pageData,h as default};
