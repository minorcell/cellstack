import{_ as a,c as i,o as n,ah as l}from"./chunks/framework.Dmpd2wBz.js";const o=JSON.parse('{"title":"从榨汁机模型理解哈希算法：原理、应用与哈希表解析","description":"哈希（Hash）是计算机科学中一个基础且至关重要的概念，它几乎贯穿了从数据结构到信息安全的每一个角落。然而，其抽象的定义常常使初学者望而却步。本文将借助一个日常生活的场景，为你揭示哈希算法的本质.","frontmatter":{"title":"从榨汁机模型理解哈希算法：原理、应用与哈希表解析","description":"哈希（Hash）是计算机科学中一个基础且至关重要的概念，它几乎贯穿了从数据结构到信息安全的每一个角落。然而，其抽象的定义常常使初学者望而却步。本文将借助一个日常生活的场景，为你揭示哈希算法的本质.","date":"2025-01-19T00:00:00.000Z","tags":["哈希算法","数据结构","算法原理","编程基础"],"head":[["link",{"rel":"canonical","href":"https://stack.mcell.topblog/2025/06_hash"}],["meta",{"property":"og:url","content":"https://stack.mcell.topblog/2025/06_hash"}]]},"headers":[],"relativePath":"blog/2025/06_hash.md","filePath":"blog/2025/06_hash.md","lastUpdated":1755346563000}'),p={name:"blog/2025/06_hash.md"};function e(h,s,t,k,r,E){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="从榨汁机模型理解哈希算法-原理、应用与哈希表解析" tabindex="-1">从榨汁机模型理解哈希算法：原理、应用与哈希表解析 <a class="header-anchor" href="#从榨汁机模型理解哈希算法-原理、应用与哈希表解析" aria-label="Permalink to &quot;从榨汁机模型理解哈希算法：原理、应用与哈希表解析&quot;">​</a></h1><blockquote><p>哈希（Hash）是计算机科学中一个基础且至关重要的概念，它几乎贯穿了从数据结构到信息安全的每一个角落。然而，其抽象的定义常常使初学者望而却步。本文将借助一个日常生活的场景，为你揭示哈希算法的本质。</p></blockquote><h3 id="核心思想-一台信息的-榨汁机" tabindex="-1">核心思想：一台信息的“榨汁机” <a class="header-anchor" href="#核心思想-一台信息的-榨汁机" aria-label="Permalink to &quot;核心思想：一台信息的“榨汁机”&quot;">​</a></h3><p>你可以想象一下，我们拥有一台功能强大的榨汁机。无论向其投入何种水果——一个苹果、一根香蕉，或是一把菠菜——经过机器的处理，最终得到的总是一杯果汁。</p><p>这台“榨汁机”的工作过程，恰好映射了哈希算法的三个核心特性：</p><ol><li><strong>定长输出 (Fixed-Length Output)</strong>：无论输入的水果体积多大、种类多复杂，输出的果汁总是在一个固定容量的杯子里。一个樱桃和一颗西瓜，产出的都是“一杯”果汁。</li><li><strong>不可逆性 (Irreversibility)</strong>：如果给你一杯混合果汁，你几乎无法将其精确地还原成原始的苹果、香蕉和菠菜。这个过程是单向的。</li><li><strong>确定性 (Determinism)</strong>：只要输入是完全相同的（例如，两个特定品种的苹果和半根香蕉），那么产出的果汁在味道、颜色和浓度上必然是完全一致的。</li></ol><p>至此，你已经掌握了哈希算法的核心思想。</p><blockquote><p><strong>哈希的核心概念</strong>：哈希函数（Hash Function）是一种算法，它能将任意长度的输入（Input）数据，通过计算转换成一个固定长度的输出（Output）。这个输出值被称为“哈希值”或“摘要”（Digest）。</p></blockquote><p>这个过程就如同信息处理的“榨汁机”，将形态各异的原始数据，压缩成一个紧凑且具有代表性的“数字指纹”。</p><h3 id="哈希算法的关键应用" tabindex="-1">哈希算法的关键应用 <a class="header-anchor" href="#哈希算法的关键应用" aria-label="Permalink to &quot;哈希算法的关键应用&quot;">​</a></h3><p>理解了基本概念后，我们来探讨哈希算法在计算机科学中的几个典型应用场景。</p><h4 id="用户密码的安全存储" tabindex="-1">用户密码的安全存储 <a class="header-anchor" href="#用户密码的安全存储" aria-label="Permalink to &quot;用户密码的安全存储&quot;">​</a></h4><p>在现代网络应用中，用户的原始密码绝不应该以明文形式存储在数据库中。这会带来巨大的安全风险，一旦数据库泄露，所有用户的账户将形同虚设。</p><p>安全的做法是存储密码经过哈希运算后生成的哈希值。其验证流程如下：</p><ol><li><strong>注册</strong>：用户设置密码时，系统计算密码的哈希值，并将该哈希值存入数据库。</li><li><strong>登录</strong>：用户输入密码进行登录时，系统对本次输入的密码执行<strong>完全相同</strong>的哈希运算，得到一个新的哈希值。</li><li><strong>比对</strong>：系统比对新生成的哈希值与数据库中存储的哈希值是否一致。如果一致，则验证通过。</li></ol><p>由于哈希算法的<strong>不可逆性</strong>，即使攻击者获取了数据库，他们也只能看到一串无规律的哈希值，无法直接反推出用户的原始密码，从而保障了账户安全。</p><p>以下是使用 Go 语言 <code>bcrypt</code> 库的示例。<code>bcrypt</code> 是专为密码哈希设计的算法，它会自动“加盐”（Salting），即为每个密码添加随机数据再进行哈希，极大地增加了破解难度。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">golang.org/x/crypto/bcrypt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mySuperSecretPassword123&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 用户注册时，对密码进行哈希处理</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // bcrypt 会自动生成并混入“盐”，确保同一密码每次哈希的结果都不同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hashedPassword, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GenerateFromPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password), bcrypt.DefaultCost)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        panic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;存储于数据库的哈希值:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hashedPassword))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 用户登录时，比对输入的密码和已存储的哈希值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loginAttempt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mySuperSecretPassword123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CompareHashAndPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hashedPassword, []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginAttempt))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;密码匹配，登录成功！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;密码错误！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="文件完整性校验" tabindex="-1">文件完整性校验 <a class="header-anchor" href="#文件完整性校验" aria-label="Permalink to &quot;文件完整性校验&quot;">​</a></h4><p>当你从网络上下载大型文件（如操作系统镜像、软件安装包）时，如何确保文件在传输过程中没有损坏或被恶意篡改？</p><p>软件发布方通常会随文件提供一串字符，如 <strong>SHA256</strong> 或 <strong>MD5</strong> 校验和，这串字符就是原始文件的哈希值。下载完成后，你可以使用相同的哈希算法（如 SHA256）在本地计算已下载文件的哈希值。</p><p>如果本地计算出的哈希值与官方提供的值完全一致，则证明文件是完整且未经篡改的。这是哈希算法<strong>确定性</strong>的直接应用。</p><p>使用 Go 计算一个字符串的 SHA256 哈希值：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crypto/sha256</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;这是一段重要的学习资料，一个字节都不能错！&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 初始化一个 SHA256 哈希实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hasher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sha256.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 写入待哈希的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hasher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 完成计算并获取哈希值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hashValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 以十六进制字符串格式输出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;数据的SHA256哈希值: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%x\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hashValue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="哈希思想的集大成者-哈希表-hash-table" tabindex="-1">哈希思想的集大成者：哈希表 (Hash Table) <a class="header-anchor" href="#哈希思想的集大成者-哈希表-hash-table" aria-label="Permalink to &quot;哈希思想的集大成者：哈希表 (Hash Table)&quot;">​</a></h3><p>哈希表（在许多语言中也称为 Map、Dictionary 或 Associative Array）是哈希思想最杰出、最广泛的应用之一。</p><p>我们常用的<strong>数组（Array）</strong> 是一种线性数据结构，它通过索引（index）来存取元素，访问速度很快。但数组的局限性在于，如果你想查找某个特定内容，却不知道它的索引，就只能从头到尾进行线性搜索（Linear Search）。当数据量巨大时，例如在一亿个用户中查找名为“张三”的用户，这种搜索方式的效率极低。</p><p><strong>哈希表（Hash Table）</strong> 正是为了解决这一问题而设计的。</p><p>哈希表的底层结构通常是一个数组，但它引入了哈希函数作为高效的“地址计算器”。其工作机制如下：</p><p>当你向哈希表中存入一个键值对（Key-Value Pair），例如 <code>(key: &quot;张三&quot;, value: &quot;用户数据...&quot;)</code>：</p><ol><li><strong>计算哈希</strong>：哈希表对 <code>key</code>（&quot;张三&quot;）应用哈希函数，生成一个哈希值（如 <code>2857399</code>）。</li><li><strong>映射索引</strong>：通过取模运算（<code>哈希值 % 数组长度</code>）将哈希值转换成一个数组的合法索引（如 <code>7</code>）。</li><li><strong>存储数据</strong>：将 <code>value</code>（&quot;用户数据...&quot;）存放在数组索引为 <code>7</code> 的位置。</li></ol><p>当需要查找“张三”的数据时，只需重复上述的哈希计算和索引映射过程，即可直接定位到数组的 <code>7</code> 号索引，从而一步到位地获取数据。这个过程完全避免了遍历。</p><p>这种设计使得哈希表的插入、删除和查找操作的平均时间复杂度达到了 <strong>O(1)</strong>，即常数时间级别，其性能几乎不受数据规模增大的影响。</p><p>在 Go 语言中，内置的 <code>map</code> 就是一个高效的哈希表实现。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建一个 key 为 string, value 为 string 的哈希表 (map)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    phoneBook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 存储键值对</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    phoneBook[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13800138000&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    phoneBook[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;李四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13900139000&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    phoneBook[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;王五&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13700137000&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 查找 &quot;李四&quot; 的电话号码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Go 语言底层会对 &quot;李四&quot; 这个 key 进行哈希计算，以快速定位数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lisiPhone, found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> phoneBook[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;李四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;查询成功，李四的电话是:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lisiPhone)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;未找到该联系人。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 无论电话簿中有 3 条还是 300 万条记录，此查找操作都近乎瞬时完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>一个必须考虑的问题是：如果两个不同的 <code>key</code>（例如“LiKui”和“LiGui”）经过哈希计算和取模运算后，得到了相同的数组索引，应该怎么办？这种情况被称为<strong>哈希冲突（Hash Collision）</strong>。尽管一个优秀的哈希算法会尽可能降低冲突概率，但理论上无法完全避免。解决哈希冲突是实现高效哈希表的关键技术，常见策略包括“<strong>链地址法</strong>”（在冲突的索引位置维护一个链表）和“<strong>开放寻址法</strong>”（当索引被占用时，向后探测空闲位置）等。</p><h3 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h3><ol><li>Go Authors. (n.d.). <em>Go maps in action</em>. The Go Blog. Retrieved from <a href="https://go.dev/blog/maps" target="_blank" rel="noreferrer">https://go.dev/blog/maps</a></li></ol>`,38)]))}const g=a(p,[["render",e]]);export{o as __pageData,g as default};
