import{_ as i,c as a,o as t,a2 as n}from"./chunks/framework.BvOGWhEu.js";const c=JSON.parse('{"title":"HTTP 状态码：15 个常见的状态码详解","description":"深入了解 HTTP 状态码的含义和使用场景，掌握前后端交互中的关键信息","frontmatter":{"title":"HTTP 状态码：15 个常见的状态码详解","description":"深入了解 HTTP 状态码的含义和使用场景，掌握前后端交互中的关键信息","date":"2025-01-22T00:00:00.000Z","tags":["HTTP","状态码","网络协议","前端开发","后端开发"],"head":[["link",{"rel":"canonical","href":"https://stack.mcell.topblog/2025/08_httpcode"}],["meta",{"property":"og:url","content":"https://stack.mcell.topblog/2025/08_httpcode"}]]},"headers":[],"relativePath":"blog/2025/08_httpcode.md","filePath":"blog/2025/08_httpcode.md","lastUpdated":1755168132000}'),e={name:"blog/2025/08_httpcode.md"};function l(h,s,p,o,k,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="http-状态码-15-个常见的状态码详解" tabindex="-1">HTTP 状态码：15 个常见的状态码详解 <a class="header-anchor" href="#http-状态码-15-个常见的状态码详解" aria-label="Permalink to &quot;HTTP 状态码：15 个常见的状态码详解&quot;">​</a></h1><p>作为一名入门开发者，你是不是也遇到过这样的场景：后端小伙伴随手给你丢个 <code>200</code> / <code>400</code> / <code>500</code> ，你就把所有&quot;请求结果&quot;一股脑的<code>response?.data?.data</code>？别怕，HTTP 状态码的细分确实不算最&quot;吸睛&quot;的知识点，但真正掌握后，不仅调试能快人一步，还能让前后端心照不宣、默契满分。</p><h2 id="为什么要认真对待状态码" tabindex="-1">为什么要认真对待状态码？ <a class="header-anchor" href="#为什么要认真对待状态码" aria-label="Permalink to &quot;为什么要认真对待状态码？&quot;">​</a></h2><ol><li><p><strong>效率更高</strong><br> 正确的状态码能让你一眼看出问题：是参数格式不对？还是权限不够？还是后台真挂了？</p></li><li><p><strong>用户体验加分</strong><br> 客户端拿到精确的状态码，可以展示更友好的提示：</p><ul><li><code>401 Unauthorized</code>：提示&quot;请先登录&quot;，</li><li><code>403 Forbidden</code>：提示&quot;权限不足&quot;，</li><li><code>404 Not Found</code>：跳到个定制化的 404 页面。</li></ul></li><li><p><strong>团队协作利器</strong><br> 一套统一的状态码规范，比一大堆注释更直观，API 文档也更易维护。</p></li></ol><hr><h2 id="五大类状态码一览" tabindex="-1">五大类状态码一览 <a class="header-anchor" href="#五大类状态码一览" aria-label="Permalink to &quot;五大类状态码一览&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类别</th><th>代码范围</th><th>含义</th><th>关键码点</th></tr></thead><tbody><tr><td><strong>信息响应</strong></td><td>100–199</td><td>已收到请求，正在继续处理</td><td><code>100 Continue</code></td></tr><tr><td><strong>成功响应</strong></td><td>200–299</td><td>请求已成功处理</td><td><code>200 OK</code>、<code>201 Created</code>、<code>204 No Content</code></td></tr><tr><td><strong>重定向消息</strong></td><td>300–399</td><td>需要客户端进一步操作</td><td><code>301 Moved Permanently</code>、<code>302 Found</code></td></tr><tr><td><strong>客户端错误</strong></td><td>400–499</td><td>请求包含错误的语法或无法满足</td><td><code>400 Bad Request</code>、<code>401</code>、<code>403</code>、<code>404</code>、<code>429</code></td></tr><tr><td><strong>服务器错误</strong></td><td>500–599</td><td>服务器未完成请求</td><td><code>500 Internal Server Error</code>、<code>502</code>、<code>503</code>、<code>504</code></td></tr></tbody></table><hr><h2 id="信息响应-100–199-已收到请求-正在继续处理" tabindex="-1">信息响应（100–199）：&quot;已收到请求，正在继续处理&quot; <a class="header-anchor" href="#信息响应-100–199-已收到请求-正在继续处理" aria-label="Permalink to &quot;信息响应（100–199）：&quot;已收到请求，正在继续处理&quot;&quot;">​</a></h2><ul><li><p><strong>100 Continue</strong><br> 当客户端大文件上传前，先发送带 <code>Expect: 100-continue</code> 的头，服务器回复 <code>100 Continue</code> 表示 OK，继续发送主体。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /upload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Expect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 100-continue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">← HTTP/1.1 100 Continue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">file-binary-data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>101 Switching Protocols</strong><br> 用于协议切换（如 HTTP → WebSocket）。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /chat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Upgrade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> websocket</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Upgrade</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">← HTTP/1.1 101 Switching Protocols</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Upgrade: websocket</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Connection: Upgrade</span></span></code></pre></div></li><li><p><strong>103 Early Hints</strong><br> 允许在主响应尚未准备好时，通过 <code>Link</code> 头预加载资源，提升首屏性能。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 103</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Early Hints</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Link</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;/style.css&gt;; rel=preload; as=style</span></span></code></pre></div></li></ul><blockquote><p>Tip：常规 API 场景用得少，除非你做大文件上传/协议升级或追求极致首屏加载。</p></blockquote><hr><h2 id="成功响应-200–299-请求已成功处理" tabindex="-1">成功响应（200–299）：&quot;请求已成功处理&quot; <a class="header-anchor" href="#成功响应-200–299-请求已成功处理" aria-label="Permalink to &quot;成功响应（200–299）：&quot;请求已成功处理&quot;&quot;">​</a></h2><ul><li><p><strong>200 OK</strong><br> &quot;一切正常&quot;，不同方法下含义略有差别：</p><ul><li><code>GET</code>：返回资源</li><li><code>POST</code>：返回操作结果</li><li><code>HEAD</code>：仅返回头部</li></ul><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mCell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>201 Created</strong><br> 资源创建成功，响应体或 <code>Location</code> 头返回新资源地址。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 201</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Created</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /projects/456</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New Project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>202 Accepted</strong><br> 表示请求已接受但尚未处理完毕，适用于异步任务。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 202</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Accepted</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;taskId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;statusUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tasks/abc123/status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>204 No Content</strong><br> 操作成功，但不返回内容。常用于 <code>PUT</code>/<code>DELETE</code>。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 204</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> No Content</span></span></code></pre></div></li><li><p><strong>206 Partial Content</strong><br> 支持断点续传或分块下载，通过 <code>Range</code> 请求头指定区域。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /video.mp4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Range</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes=0-999</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">← HTTP/1.1 206 Partial Content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Content-Range: bytes 0-999/50000</span></span></code></pre></div></li></ul><hr><h2 id="重定向-300–399-换个地方取资源" tabindex="-1">重定向（300–399）：&quot;换个地方取资源&quot; <a class="header-anchor" href="#重定向-300–399-换个地方取资源" aria-label="Permalink to &quot;重定向（300–399）：&quot;换个地方取资源&quot;&quot;">​</a></h2><ul><li><p><strong>301 Moved Permanently</strong><br> 资源永久迁移，SEO 会跟着改指向。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Moved Permanently</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://new.example.com/page</span></span></code></pre></div></li><li><p><strong>302 Found</strong><br> 临时重定向，浏览器跟去拿新地址，但不更新收藏或搜索索引。</p></li><li><p><strong>303 See Other</strong><br> 通常对 <code>POST</code> 请求用 <code>GET</code> 去拿别的&quot;确认页&quot;。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 303</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> See Other</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /order/789/confirmation</span></span></code></pre></div></li><li><p><strong>304 Not Modified</strong><br> 缓存协商命中，告知客户端使用本地缓存即可。</p></li></ul><blockquote><p>调试时留意浏览器缓存，老 301 可能让你追不到最新改动。</p></blockquote><hr><h2 id="客户端错误-400–499-请求包含错误" tabindex="-1">客户端错误（400–499）：&quot;请求包含错误&quot; <a class="header-anchor" href="#客户端错误-400–499-请求包含错误" aria-label="Permalink to &quot;客户端错误（400–499）：&quot;请求包含错误&quot;&quot;">​</a></h2><ul><li><p><strong>400 Bad Request</strong><br> 参数格式错了、JSON 语法不合法、必填字段缺失，都归这档。</p></li><li><p><strong>401 Unauthorized</strong><br> 需要身份验证（未登录或令牌过期）。</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 401</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Unauthorized</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">WWW-Authenticate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bearer realm=&quot;example&quot;</span></span></code></pre></div></li><li><p><strong>403 Forbidden</strong><br> 登录了也没用，你没有访问该资源的权限。</p></li><li><p><strong>404 Not Found</strong><br> 请求的地址不存在，自定义 404 页面能提升用户体验。</p></li><li><p><strong>405 Method Not Allowed</strong><br> 客户端使用了不被允许的 HTTP 方法。</p></li><li><p><strong>429 Too Many Requests</strong><br> 频率受限，需要等待 <code>Retry-After</code> 指定的秒数再试。</p></li></ul><blockquote><p>建议在全局拦截器统一处理 401/403/429，减少散落项目各处的重复逻辑。</p></blockquote><hr><h2 id="服务器错误-500–599-后台罢工了" tabindex="-1">服务器错误（500–599）：&quot;后台罢工了&quot; <a class="header-anchor" href="#服务器错误-500–599-后台罢工了" aria-label="Permalink to &quot;服务器错误（500–599）：&quot;后台罢工了&quot;&quot;">​</a></h2><ul><li><strong>500 Internal Server Error</strong><br> 通用报错，通常要查看日志才能定位。</li><li><strong>502 Bad Gateway</strong><br> 上游服务无响应或返回错误。</li><li><strong>503 Service Unavailable</strong><br> 临时维护或过载，可带 <code>Retry-After</code> 提示下次上线时间。</li><li><strong>504 Gateway Timeout</strong><br> 网关等待响应超时。</li><li><strong>505 HTTP Version Not Supported</strong><br> 客户端使用的 HTTP 版本不被支持。</li></ul><blockquote><p>运维贴士：监控告警除了状态码，还要打好日志、记录堆栈，才能快速排查。</p></blockquote><hr><h2 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h2><ol><li><strong>先记常用</strong>：200/201/204、301/302、400/401/403/404/429、500/502/503/504。</li><li><strong>按场景选码</strong>：让 API&quot;说话&quot;更精准，前端能一眼识别各种情况。</li><li><strong>多埋点多日志</strong>：状态码只是第一步，配合日志和链路追踪才是真正的&quot;全息&quot;信息。</li></ol><p>掌握 HTTP 状态码，不是死背面试题，而是让你的接口设计更优雅、调试更高效、团队协作更流畅。下次有同学问&quot;为啥不用全 200？&quot;，你就可以教他：&quot;那我问你，你 xxxxxxxxx...&quot;</p><hr><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2><ol><li><strong>RFC</strong>: <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-6" target="_blank" rel="noreferrer">Response Status Codes</a></li><li><strong>MDN</strong>: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Status" target="_blank" rel="noreferrer">HTTP 响应状态码</a></li></ol>`,33)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
