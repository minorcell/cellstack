import{_ as a,c as i,o as n,a2 as l}from"./chunks/framework.CGIWSPU7.js";const o=JSON.parse('{"title":"那台榨汁机，竟是哈希表祖师爷？从生活场景理解哈希算法","description":"用榨汁机的比喻深入浅出地解释哈希算法原理，从基本概念到实际应用的完整指南","frontmatter":{"title":"那台榨汁机，竟是哈希表祖师爷？从生活场景理解哈希算法","description":"用榨汁机的比喻深入浅出地解释哈希算法原理，从基本概念到实际应用的完整指南","date":"2025-01-19T00:00:00.000Z","tags":["哈希算法","数据结构","算法原理","编程基础"],"head":[["link",{"rel":"canonical","href":"https://stack.mcell.topblog/2025/19_hash"}],["meta",{"property":"og:url","content":"https://stack.mcell.topblog/2025/19_hash"}]]},"headers":[],"relativePath":"blog/2025/19_hash.md","filePath":"blog/2025/19_hash.md","lastUpdated":1755147736000}'),p={name:"blog/2025/19_hash.md"};function t(e,s,h,k,r,E){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="那台榨汁机-竟是哈希表祖师爷" tabindex="-1">那台榨汁机，竟是哈希表祖师爷？ <a class="header-anchor" href="#那台榨汁机-竟是哈希表祖师爷" aria-label="Permalink to &quot;那台榨汁机，竟是哈希表祖师爷？&quot;">​</a></h1><p>朋友们好，我是你们的朋友<a href="https://mcell.top" target="_blank" rel="noreferrer">mCell</a></p><p>今天想跟大家聊一个在计算机世界里几乎无处不在，但又总让人感觉有点&quot;不明觉厉&quot;的概念——<strong>哈希（Hash）</strong> 。我会用一个你绝对想不到的厨房电器，带你走进哈希的世界。</p><h3 id="榨汁机-哈希算法的-祖师爷" tabindex="-1">榨汁机：哈希算法的&quot;祖师爷&quot; <a class="header-anchor" href="#榨汁机-哈希算法的-祖师爷" aria-label="Permalink to &quot;榨汁机：哈希算法的&quot;祖师爷&quot;&quot;">​</a></h3><p>想象一下，你有一台超屌的榨汁机。</p><p>不管你往里面扔的是一个苹果、一根香蕉，还是一把菠菜，甚至是（如果你有钱任性的话）一整颗榴莲，这台榨汁机“咔咔咔”一顿操作，最后出来的都是啥？</p><p><strong>一杯果汁。</strong></p><p>对吧？这杯果汁有几个特点：</p><ol><li><strong>定长输出</strong>：不管你扔进去的水果有多大、多复杂，出来的果汁总是一杯。你扔一个樱桃是一杯，扔一个西瓜也是一杯（假设杯子够大）。</li><li><strong>不可逆性</strong>：我给你一杯混合果汁，你能完美地把里面的苹果、香蕉、菠菜再给我变回去吗？Looking my eyes，显然不能！</li><li><strong>确定性</strong>：只要你扔进去的东西完全一样（比如都是两个特定品种的苹果和半根香蕉），那么榨出来的果汁，味道、颜色、浓度也一定是完全一样的。</li></ol><p>好了，恭喜你，你已经理解了哈希最核心的思想！</p><p>计算机里的<strong>哈希函数（Hash Function）</strong> ，就是这么一台“信息榨汁机”。</p><blockquote><p><strong>哈希的核心概念</strong>：将任意长度的输入（Input），通过一个特定的算法（哈希函数），转换成一个固定长度的输出（Output），这个输出就是“哈希值”或“摘要”（Digest）。</p></blockquote><p>这个过程就像榨汁，把复杂多变的信息，压缩成一个简短、固定长度的“指纹”。</p><hr><h3 id="哈希在计算机世界的-高光时刻" tabindex="-1">哈希在计算机世界的“高光时刻” <a class="header-anchor" href="#哈希在计算机世界的-高光时刻" aria-label="Permalink to &quot;哈希在计算机世界的“高光时刻”&quot;">​</a></h3><p>理解了基本概念，咱们来看看这台“榨汁机”在计算机科学里是怎么大放异彩的。</p><h4 id="_1-网站用户密码保护-给你的密码-易容" tabindex="-1">1. 网站用户密码保护：给你的密码“易容” <a class="header-anchor" href="#_1-网站用户密码保护-给你的密码-易容" aria-label="Permalink to &quot;1. 网站用户密码保护：给你的密码“易容”&quot;">​</a></h4><p>你以为你注册网站时，你的密码“123456”就原封不动地躺在人家数据库里吗？要是这样，那可就太“裸奔”了！一旦数据库泄露，所有用户的密码都一览无余。</p><p>负责任的网站，后台存的其实是你密码的“哈希值”。</p><p>当你登录时，系统把你输入的密码用<strong>同样的哈希算法</strong>再“榨一遍汁”，然后比较两次的“果汁”（哈希值）是不是一样。如果一样，登录成功！</p><p>这样一来，即使黑客拖走了数据库，他也只能看到一堆乱码一样的哈希值，无法反推出你的原始密码。这就是哈希的<strong>不可逆性</strong>在起作用。</p><p>用 Go 语言简单示意一下这个过程（这里用 <code>bcrypt</code> 库，它是专门为密码哈希设计的，能自动加盐，更安全）：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">golang.org/x/crypto/bcrypt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mySuperSecretPassword123&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 1. 当用户注册时，我们将密码哈希化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//  \`bcrypt.GenerateFromPassword\` 会自动加“盐”，增加破解难度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	hashedPassword, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GenerateFromPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password), bcrypt.DefaultCost)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;存储在数据库的哈希值:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hashedPassword))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 2. 当用户登录时，我们比较输入的密码和存储的哈希值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//  用户输入的密码是 &quot;mySuperSecretPassword123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	loginAttempt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mySuperSecretPassword123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcrypt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CompareHashAndPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hashedPassword, []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loginAttempt))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;密码正确，登录成功！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;密码错误！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h4 id="_2-文件完整性校验-下载的学习资料完整吗" tabindex="-1">2. 文件完整性校验：下载的学习资料完整吗？ <a class="header-anchor" href="#_2-文件完整性校验-下载的学习资料完整吗" aria-label="Permalink to &quot;2. 文件完整性校验：下载的学习资料完整吗？&quot;">​</a></h4><p>你从网上下载一个很大的文件，比如一个操作系统镜像。你怎么知道在下载过程中，文件没有损坏，或者没有被中间人篡改呢？</p><p>发布者通常会提供一个叫做 <strong>SHA256</strong> 或 <strong>MD5</strong> 的字符串，这就是文件的哈希值。</p><p>你下载完文件后，在本地用同样的哈希算法（比如 SHA256）也给文件“榨个汁”，看看你得到的哈希值和官方提供的是不是一模一样。如果一个字节都不差，那就说明文件安然无恙，可以放心使用。这就是哈希的<strong>确定性</strong>在守护数据。</p><p>用 Go 语言计算一个字符串的 SHA256 值：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crypto/sha256</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;这是一段重要的学习资料，一个字节都不能错！&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 创建一个新的SHA256哈希对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	hasher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sha256.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 写入数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	hasher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 计算哈希值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	hashValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 以十六进制格式打印</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;数据的SHA256哈希值: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%x\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hashValue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><hr><h3 id="终极进化-哈希表-hash-table-——-告别-夺命连环-call" tabindex="-1">终极进化：哈希表（Hash Table）—— 告别“夺命连环 call” <a class="header-anchor" href="#终极进化-哈希表-hash-table-——-告别-夺命连环-call" aria-label="Permalink to &quot;终极进化：哈希表（Hash Table）—— 告别“夺命连环 call”&quot;">​</a></h3><p>好了，终于到了我们的重头戏——<strong>哈希表</strong>。这可能是哈希思想最牛、最广泛的应用了。</p><p>在编程中，我们最常用的数据结构之一是<strong>数组（Array）</strong> 。数组就像一个有编号的储物柜，东西都按顺序放好。</p><p>但数组有个烦人的问题：如果你想找某个东西，但你不知道它的编号，你该怎么办？</p><p><strong>只能一个一个柜子打开找。</strong></p><p>比如，我想在一个存了一亿个用户信息的数组里，找到名叫“张三”的用户。最坏的情况下，我可能要从第一个找到第一亿个，这简直是“夺命连环 call”，效率太低了！</p><p>这时候，**哈希表（Hash Table / Map）**闪亮登场！</p><p>哈希表说：“别一个个找了，我直接告诉你‘张三’在哪！”</p><p>它是怎么做到的？其实，<strong>哈希表的底层骨架，依然是一个数组</strong>。但它多了一个神奇的“引路人”——哈希函数。</p><p>当你往哈希表里存东西时，比如 <code>(key: &quot;张三&quot;, value: &quot;用户数据...&quot;)</code>，它会这样做：</p><ol><li><strong>“榨汁”</strong> ：对 <code>key</code>（&quot;张三&quot;）进行哈希运算，得到一个哈希值（比如 <code>2857399</code>）。</li><li><strong>“找位置”</strong> ：用这个哈希值通过一个取模运算（比如 <code>2857399 % 数组长度</code>）得到一个数组的索引（比如 <code>7</code>）。</li><li><strong>“放东西”</strong> ：把 <code>value</code>（&quot;用户数据...&quot;）直接存到数组索引为 <code>7</code> 的位置。</li></ol><p>看到了吗？当我们想找“张三”的数据时，只需要重复一遍上面的“榨汁”和“找位置”操作，就能瞬间定位到数组的 <code>7</code> 号索引，直接把数据取出来！根本不需要遍历！</p><p>这种“指哪打哪”的特性，让哈希表的查找、插入、删除操作的平均时间复杂度达到了惊人的 <strong>O(1)</strong> ，也就是“常数时间”，几乎不随数据量的增减而变化。</p><p>在 Go 语言里，这个牛 X 的数据结构就是内置的 <code>map</code>。</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 创建一个哈希表（map），key是string，value是string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 想象成一个电话簿</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	phoneBook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 存储键值对，就像把联系人存进电话簿</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	phoneBook[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13800138000&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	phoneBook[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;李四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13900139000&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	phoneBook[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;王五&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13700137000&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	phoneBook[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mCell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0000000001&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // (●&#39;◡&#39;●)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 查找“mCell”的电话</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Go 会在底层对 &quot;mCell&quot; 这个key进行哈希</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 然后快速定位到数据位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	mCellPhone, found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> phoneBook[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mCell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;找到了！mCell的电话是:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mCellPhone)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;没找到这个人。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这操作几乎是瞬时的，不管电话簿里有4个人还是400万人</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>当然，你可能会问：“如果不同的 key（比如‘李逵’和‘李鬼’）‘榨汁’后算出的数组位置一样怎么办？” 这个问题叫做<strong>哈希冲突（Hash Collision）</strong> ，这确实是个问题，虽然发生的概率如找到两颗相同的沙砾，但聪明的计算机科学家们为了防止这种事件发生也设计了很多解决方案，比如“链地址法”（在那个位置上挂一个链条，把冲突的人都串上去）或者“开放寻址法”（在这个位置被人占了？那我往后找个空位），这里就不展开了，因为我还没研究（bushi</p><hr><h3 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h3><ol><li>The Go Programming Language. (n.d.). <em>Go maps in action</em>. Retrieved from <a href="https://go.dev/blog/maps" target="_blank" rel="noreferrer">https://go.dev/blog/maps</a> (Go 语言官方博客中关于 map 实现的深入介绍)</li></ol>`,49)]))}const g=a(p,[["render",t]]);export{o as __pageData,g as default};
