import{_ as i,c as a,o as t,a2 as e}from"./chunks/framework.BvOGWhEu.js";const E=JSON.parse('{"title":"VSCode 自动格式化：ESLint 与 Prettier","description":"详细配置 VSCode 自动格式化功能，实现 ESLint 和 Prettier 的完美协同工作","frontmatter":{"title":"VSCode 自动格式化：ESLint 与 Prettier","description":"详细配置 VSCode 自动格式化功能，实现 ESLint 和 Prettier 的完美协同工作","date":"2025-01-18T00:00:00.000Z","tags":["VSCode","ESLint","Prettier","代码格式化","开发工具"],"head":[["link",{"rel":"canonical","href":"https://stack.mcell.topblog/2025/04_vscodeformat"}],["meta",{"property":"og:url","content":"https://stack.mcell.topblog/2025/04_vscodeformat"}]]},"headers":[],"relativePath":"blog/2025/04_vscodeformat.md","filePath":"blog/2025/04_vscodeformat.md","lastUpdated":1755147736000}'),n={name:"blog/2025/04_vscodeformat.md"};function l(h,s,p,r,o,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="vscode-自动格式化-eslint-与-prettier" tabindex="-1">VSCode 自动格式化：ESLint 与 Prettier <a class="header-anchor" href="#vscode-自动格式化-eslint-与-prettier" aria-label="Permalink to &quot;VSCode 自动格式化：ESLint 与 Prettier&quot;">​</a></h1><p>在现代前端开发中，代码风格的一致性是一个永恒的话题。无论是团队协作还是个人项目，保持代码整洁、可读性强是每个开发者追求的目标。而 VSCode 提供了强大的工具链，让我们可以通过简单的配置实现 <strong>按下 Command + S（Mac）或 Ctrl + S（Windows/Linux）时自动格式化代码</strong> 的功能。听起来很酷对吧？但你知道这背后的机制和细节吗？</p><p>今天，我们就来深入探讨如何通过 ESLint 和 Prettier 的结合，在 VSCode 中实现这一&quot;自动化&quot;流程，并揭示其中的一些关键点。</p><hr><h3 id="_1-确保插件已正确安装" tabindex="-1">1. 确保插件已正确安装 <a class="header-anchor" href="#_1-确保插件已正确安装" aria-label="Permalink to &quot;1. 确保插件已正确安装&quot;">​</a></h3><p>首先，我们需要确保两个核心工具已经就位：<strong>ESLint</strong> 和 <strong>Prettier</strong>。它们分别扮演着不同的角色：</p><ul><li><strong>ESLint</strong> 是一个静态代码分析工具，用于检查代码中的潜在问题，并提供修复建议。</li><li><strong>Prettier</strong> 是一个代码格式化工具，专注于统一代码风格，比如缩进、引号、分号等。</li></ul><p>如果你还没有安装这两个插件，可以打开 VSCode 的扩展市场，搜索并安装以下两个插件：</p><ul><li><strong>ESLint</strong>（作者：Dirk Baeumer）</li><li><strong>Prettier - Code formatter</strong>（作者：Prettier）</li></ul><p>安装完成后，记得启用它们。</p><blockquote><p><strong>小提示</strong>：插件只是第一步，真正让它们发挥作用的是后续的配置。别急，我们慢慢来。</p></blockquote><hr><h3 id="_2-配置默认格式化工具" tabindex="-1">2. 配置默认格式化工具 <a class="header-anchor" href="#_2-配置默认格式化工具" aria-label="Permalink to &quot;2. 配置默认格式化工具&quot;">​</a></h3><p>VSCode 支持多种格式化工具（比如内置的格式化器、Prettier、Beautify 等），但我们希望明确指定 <strong>Prettier</strong> 作为默认格式化工具。为什么？因为 Prettier 更加专注于代码风格，且与 ESLint 的集成更加顺畅。</p><h4 id="方法一-通过-ui-设置" tabindex="-1">方法一：通过 UI 设置 <a class="header-anchor" href="#方法一-通过-ui-设置" aria-label="Permalink to &quot;方法一：通过 UI 设置&quot;">​</a></h4><ol><li>打开 VSCode 设置（Mac: <code>Cmd + ,</code>，Windows/Linux: <code>Ctrl + ,</code>）。</li><li>搜索 <code>Default Formatter</code>。</li><li>将其设置为 <code>esbenp.prettier-vscode</code>（即 Prettier 插件）。</li></ol><h4 id="方法二-直接修改-settings-json" tabindex="-1">方法二：直接修改 <code>settings.json</code> <a class="header-anchor" href="#方法二-直接修改-settings-json" aria-label="Permalink to &quot;方法二：直接修改 \`settings.json\`&quot;">​</a></h4><p>如果你更喜欢手动编辑配置文件，可以在 <code>settings.json</code> 中添加如下内容：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[javascript]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esbenp.prettier-vscode&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[typescript]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esbenp.prettier-vscode&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[html]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esbenp.prettier-vscode&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[vue]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esbenp.prettier-vscode&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这段配置的意思是：针对 JavaScript、TypeScript、HTML 和 Vue 文件，默认使用 Prettier 进行格式化。</p><hr><h3 id="_3-启用保存时自动格式化" tabindex="-1">3. 启用保存时自动格式化 <a class="header-anchor" href="#_3-启用保存时自动格式化" aria-label="Permalink to &quot;3. 启用保存时自动格式化&quot;">​</a></h3><p>接下来，我们需要告诉 VSCode 在保存文件时自动格式化代码。这个功能非常实用，因为它让你无需额外操作即可保持代码整洁。</p><h4 id="方法一-通过-ui-设置-1" tabindex="-1">方法一：通过 UI 设置 <a class="header-anchor" href="#方法一-通过-ui-设置-1" aria-label="Permalink to &quot;方法一：通过 UI 设置&quot;">​</a></h4><ol><li>打开设置（<code>Cmd + ,</code> 或 <code>Ctrl + ,</code>）。</li><li>搜索 <code>Format On Save</code>。</li><li>勾选 <code>Editor: Format On Save</code>。</li></ol><h4 id="方法二-直接修改-settings-json-1" tabindex="-1">方法二：直接修改 <code>settings.json</code> <a class="header-anchor" href="#方法二-直接修改-settings-json-1" aria-label="Permalink to &quot;方法二：直接修改 \`settings.json\`&quot;">​</a></h4><p>在 <code>settings.json</code> 中添加以下配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;editor.formatOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>这样，每次保存文件时，VSCode 都会调用默认格式化工具（也就是我们刚刚配置的 Prettier）对代码进行格式化。</p><hr><h3 id="_4-配置-eslint-自动修复" tabindex="-1">4. 配置 ESLint 自动修复 <a class="header-anchor" href="#_4-配置-eslint-自动修复" aria-label="Permalink to &quot;4. 配置 ESLint 自动修复&quot;">​</a></h3><p>虽然 Prettier 负责代码风格，但 ESLint 的作用不可忽视——它可以捕获代码中的潜在问题（如未使用的变量、语法错误等）。为了让 ESLint 在保存时也能自动修复这些问题，我们需要启用它的 <code>Auto Fix On Save</code> 功能。</p><h4 id="方法一-通过-ui-设置-2" tabindex="-1">方法一：通过 UI 设置 <a class="header-anchor" href="#方法一-通过-ui-设置-2" aria-label="Permalink to &quot;方法一：通过 UI 设置&quot;">​</a></h4><ol><li>打开设置（<code>Cmd + ,</code> 或 <code>Ctrl + ,</code>）。</li><li>搜索 <code>ESLint: Auto Fix On Save</code>。</li><li>勾选该选项。</li></ol><h4 id="方法二-直接修改-settings-json-2" tabindex="-1">方法二：直接修改 <code>settings.json</code> <a class="header-anchor" href="#方法二-直接修改-settings-json-2" aria-label="Permalink to &quot;方法二：直接修改 \`settings.json\`&quot;">​</a></h4><p>在 <code>settings.json</code> 中添加以下配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;editor.codeActionsOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;source.fixAll.eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这段配置的意思是：在保存文件时，自动运行 ESLint 的修复功能。</p><hr><h3 id="_5-让-prettier-和-eslint-协同工作" tabindex="-1">5. 让 Prettier 和 ESLint 协同工作 <a class="header-anchor" href="#_5-让-prettier-和-eslint-协同工作" aria-label="Permalink to &quot;5. 让 Prettier 和 ESLint 协同工作&quot;">​</a></h3><p>到目前为止，我们已经配置了 Prettier 和 ESLint 的基本功能，但它们之间可能会存在规则冲突。例如，ESLint 可能要求使用双引号，而 Prettier 默认使用单引号。这种冲突会导致格式化结果不一致。</p><p>为了避免这种情况，我们可以使用 <code>eslint-config-prettier</code> 和 <code>eslint-plugin-prettier</code> 来协调两者的规则。</p><h4 id="步骤" tabindex="-1">步骤： <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤：&quot;">​</a></h4><ol><li>在项目根目录下安装依赖：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint-config-prettier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint-plugin-prettier</span></span></code></pre></div></li><li>更新 <code>.eslintrc.js</code> 文件，添加以下配置：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;eslint:recommended&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;plugin:prettier/recommended&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启用 Prettier 规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;prettier/prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 Prettier 格式问题视为 ESLint 错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ol><p>通过这种方式，ESLint 会优先使用 Prettier 的规则，从而避免冲突。</p><hr><h3 id="_6-验证配置" tabindex="-1">6. 验证配置 <a class="header-anchor" href="#_6-验证配置" aria-label="Permalink to &quot;6. 验证配置&quot;">​</a></h3><p>完成上述步骤后，我们需要验证配置是否生效。以下是验证方法：</p><ol><li>打开一个 JavaScript/TypeScript/Vue 文件。</li><li>故意写一些不符合格式规范的代码（例如多余的空格、未对齐的缩进等）。</li><li>按下 <code>Command + S</code> 或 <code>Ctrl + S</code>。</li><li>如果配置正确，代码应该会自动格式化，并且 ESLint 的问题也会被修复。</li></ol><hr><h3 id="_7-完整的-settings-json-示例" tabindex="-1">7. 完整的 <code>settings.json</code> 示例 <a class="header-anchor" href="#_7-完整的-settings-json-示例" aria-label="Permalink to &quot;7. 完整的 \`settings.json\` 示例&quot;">​</a></h3><p>为了方便参考，这里是一个完整的 <code>settings.json</code> 配置示例：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;[javascript]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esbenp.prettier-vscode&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;[typescript]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esbenp.prettier-vscode&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;[html]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esbenp.prettier-vscode&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;[vue]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;editor.defaultFormatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esbenp.prettier-vscode&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.formatOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.codeActionsOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;source.fixAll.eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;eslint.validate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;typescript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prettier.singleQuote&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prettier.semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prettier.tabWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="_8-常见问题排查" tabindex="-1">8. 常见问题排查 <a class="header-anchor" href="#_8-常见问题排查" aria-label="Permalink to &quot;8. 常见问题排查&quot;">​</a></h3><h4 id="问题-1-格式化未生效" tabindex="-1">问题 1：格式化未生效 <a class="header-anchor" href="#问题-1-格式化未生效" aria-label="Permalink to &quot;问题 1：格式化未生效&quot;">​</a></h4><ul><li>确保当前文件类型支持 Prettier（例如 <code>.js</code>, <code>.ts</code>, <code>.vue</code> 等）。</li><li>检查 <code>settings.json</code> 中是否正确设置了 <code>editor.defaultFormatter</code>。</li></ul><h4 id="问题-2-eslint-自动修复未生效" tabindex="-1">问题 2：ESLint 自动修复未生效 <a class="header-anchor" href="#问题-2-eslint-自动修复未生效" aria-label="Permalink to &quot;问题 2：ESLint 自动修复未生效&quot;">​</a></h4><ul><li>确保项目中已安装 ESLint 和相关插件。</li><li>检查 <code>.eslintrc.js</code> 文件是否正确配置了 <code>eslint-plugin-prettier</code>。</li></ul><h4 id="问题-3-规则冲突" tabindex="-1">问题 3：规则冲突 <a class="header-anchor" href="#问题-3-规则冲突" aria-label="Permalink to &quot;问题 3：规则冲突&quot;">​</a></h4><ul><li>如果 Prettier 和 ESLint 规则冲突，优先使用 <code>eslint-config-prettier</code> 来禁用冲突规则。</li></ul><hr><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>通过以上步骤，你应该能够实现按下 <code>Command + S</code> 或 <code>Ctrl + S</code> 时自动格式化代码并修复 ESLint 问题的功能！这个小小的配置不仅能提升你的开发效率，还能让你的代码始终保持一致性。</p><p>当然，工具只是辅助，真正的代码质量还需要靠你的经验和思考。希望这篇文章能帮助你更好地理解 VSCode 的配置机制，并为你带来一些启发！</p>`,65)]))}const c=i(n,[["render",l]]);export{E as __pageData,c as default};
